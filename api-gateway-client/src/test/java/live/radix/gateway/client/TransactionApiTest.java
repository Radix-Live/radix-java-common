/*
 * Radix Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to simply build and submit transactions to the network.  The API is designed for use by the Radix Foundation's [Desktop Wallet](https://wallet.radixdlt.com/) and [Explorer](https://explorer.radixdlt.com/), and replaces the original Olympia \"Archive Node API\".  # Gateway API Overview  The Gateway API is separated into distinct groupings:  * `/gateway` - Information about the Gateway API status * `/account/_*` - To query account-related information * `/token/_*` - To query token-related information * `/validator/_*` and `/validators` - To query validator-related information * `/transaction/_*` - To build, finalize and submit transactions, and to read the status and content of submitted and on-ledger transactions. * `/custom/_*` - Additional endpoints that are an unofficial extensions to the Gateway API and available only at some API providers (e.g. `https://radix.live`),           or as a custom build from a [forked repository](https://github.com/Radix-Live/radixdlt-network-gateway)  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/radixdlt-network-gateway), which is configured to read from full node/s to extract and index data from the network.  # Gateway API Format  The API is designed in a JSON-RPC style, using HTTP as a transport layer, which means that:  * All requests are POST requests. * Any error is returned with an HTTP status code of 500, with a returned error object.   * The error object contains an HTTP-like `code`   * The error object also contains a structured/typed `details` sub-object, with a `type` discriminator, allowing for structured error interpretation in clients.  # Comparison to other Radix APIs  * [Core API](https://redocly.github.io/redoc/?url=https://raw.githubusercontent.com/radixdlt/radixdlt/main/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/api.yaml) - The Core API is a low level API exposed by full nodes, and designed for use on internal networks. It is primarily designed for network integrations such as exchanges, ledger analytics providers, or hosted ledger data dashboards. The Core API provides endpoints for reading the mempool, constructing transactions and also exposes a stream of committed transactions.  * [System API](https://redocly.github.io/redoc/?url=https://raw.githubusercontent.com/radixdlt/radixdlt/main/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/system/api.yaml) - The System API is a private API exposed by full nodes to read system status.  The Gateway API offers a much wider range of query options and is more performant than the Core API. It is built on top of the Core API, ingesting data via the Core API transaction stream into a relational database.  The Gateway API transaction/construction endpoints operate with the concept of \"actions\" - these are higher-levels of intent compared with the Core API, which makes it easier for clients to use. The Core API should be used if you require more power/flexiblity for managing UTXOs, or submitting transactions which can't be mapped to a Gateway API action. 
 *
 * The version of the OpenAPI document: 1.1.2-L
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.gateway.client;

import live.radix.gateway.ApiException;
import live.radix.gateway.model.ErrorResponse;
import live.radix.gateway.model.TransactionBuildRequest;
import live.radix.gateway.model.TransactionBuildResponse;
import live.radix.gateway.model.TransactionFinalizeRequest;
import live.radix.gateway.model.TransactionFinalizeResponse;
import live.radix.gateway.model.TransactionRulesRequest;
import live.radix.gateway.model.TransactionRulesResponse;
import live.radix.gateway.model.TransactionStatusRequest;
import live.radix.gateway.model.TransactionStatusResponse;
import live.radix.gateway.model.TransactionSubmitRequest;
import live.radix.gateway.model.TransactionSubmitResponse;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionApi
 */
@Ignore
public class TransactionApiTest {

    private final TransactionApi api = new TransactionApi();

    /**
     * Build Transaction
     *
     * Returns a built unsigned transaction payload, from a set of intended actions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionBuildPostTest() throws ApiException {
        TransactionBuildRequest transactionBuildRequest = null;
        TransactionBuildResponse response = api.transactionBuildPost(transactionBuildRequest);

        // TODO: test validations
    }
    /**
     * Finalize Transaction
     *
     * Returns a signed transaction payload and transaction identifier, from an unsigned transaction payload and signature.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionFinalizePostTest() throws ApiException {
        TransactionFinalizeRequest transactionFinalizeRequest = null;
        TransactionFinalizeResponse response = api.transactionFinalizePost(transactionFinalizeRequest);

        // TODO: test validations
    }
    /**
     * Get Transaction Rules
     *
     * Returns the current rules used to build and validate transactions in the Radix Engine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionRulesPostTest() throws ApiException {
        TransactionRulesRequest transactionRulesRequest = null;
        TransactionRulesResponse response = api.transactionRulesPost(transactionRulesRequest);

        // TODO: test validations
    }
    /**
     * Transaction Status
     *
     * Returns the status and contents of the transaction with the given transaction identifier. Transaction identifiers which aren&#39;t recognised as either belonging to a committed transaction or a transaction submitted through this Network Gateway may return a &#x60;TransactionNotFoundError&#x60;. Transaction identifiers relating to failed transactions will, after a delay, also be reported as a &#x60;TransactionNotFoundError&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionStatusPostTest() throws ApiException {
        TransactionStatusRequest transactionStatusRequest = null;
        TransactionStatusResponse response = api.transactionStatusPost(transactionStatusRequest);

        // TODO: test validations
    }
    /**
     * Submit Transaction
     *
     * Submits a signed transaction payload to the network. The transaction identifier from finalize or submit can then be used to track the transaction status. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionSubmitPostTest() throws ApiException {
        TransactionSubmitRequest transactionSubmitRequest = null;
        TransactionSubmitResponse response = api.transactionSubmitPost(transactionSubmitRequest);

        // TODO: test validations
    }
}
