/*
 * Radix Gateway API
 * This API is designed to enable clients to efficiently query information on the RadixDLT ledger, and allow clients to simply build and submit transactions to the network.  The API is designed for use by the Radix Foundation's [Desktop Wallet](https://wallet.radixdlt.com/) and [Explorer](https://explorer.radixdlt.com/), and replaces the original Olympia \"Archive Node API\".  # Gateway API Overview  The Gateway API is separated into distinct groupings:  * `/gateway` - Information about the Gateway API status * `/account/_*` - To query account-related information * `/token/_*` - To query token-related information * `/validator/_*` and `/validators` - To query validator-related information * `/transaction/_*` - To build, finalize and submit transactions, and to read the status and content of submitted and on-ledger transactions. * `/custom/_*` - Additional endpoints that are an unofficial extensions to the Gateway API and available only at some API providers (e.g. `https://radix.live`),           or as a custom build from a [forked repository](https://github.com/Radix-Live/radixdlt-network-gateway)  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/radixdlt-network-gateway), which is configured to read from full node/s to extract and index data from the network.  # Gateway API Format  The API is designed in a JSON-RPC style, using HTTP as a transport layer, which means that:  * All requests are POST requests. * Any error is returned with an HTTP status code of 500, with a returned error object.   * The error object contains an HTTP-like `code`   * The error object also contains a structured/typed `details` sub-object, with a `type` discriminator, allowing for structured error interpretation in clients.  # Comparison to other Radix APIs  * [Core API](https://redocly.github.io/redoc/?url=https://raw.githubusercontent.com/radixdlt/radixdlt/main/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/core/api.yaml) - The Core API is a low level API exposed by full nodes, and designed for use on internal networks. It is primarily designed for network integrations such as exchanges, ledger analytics providers, or hosted ledger data dashboards. The Core API provides endpoints for reading the mempool, constructing transactions and also exposes a stream of committed transactions.  * [System API](https://redocly.github.io/redoc/?url=https://raw.githubusercontent.com/radixdlt/radixdlt/main/radixdlt-core/radixdlt/src/main/java/com/radixdlt/api/system/api.yaml) - The System API is a private API exposed by full nodes to read system status.  The Gateway API offers a much wider range of query options and is more performant than the Core API. It is built on top of the Core API, ingesting data via the Core API transaction stream into a relational database.  The Gateway API transaction/construction endpoints operate with the concept of \"actions\" - these are higher-levels of intent compared with the Core API, which makes it easier for clients to use. The Core API should be used if you require more power/flexiblity for managing UTXOs, or submitting transactions which can't be mapped to a Gateway API action. 
 *
 * The version of the OpenAPI document: 1.1.2-L
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package live.radix.gateway.client;

import com.fasterxml.jackson.core.type.TypeReference;

import live.radix.gateway.ApiException;
import live.radix.gateway.ApiClient;
import live.radix.gateway.Configuration;
import live.radix.gateway.model.*;
import live.radix.gateway.Pair;

import live.radix.gateway.model.AccountBalancesRequest;
import live.radix.gateway.model.AccountBalancesResponse;
import live.radix.gateway.model.AccountDeriveRequest;
import live.radix.gateway.model.AccountDeriveResponse;
import live.radix.gateway.model.AccountStakesRequest;
import live.radix.gateway.model.AccountStakesResponse;
import live.radix.gateway.model.AccountTransactionsRequest;
import live.radix.gateway.model.AccountTransactionsResponse;
import live.radix.gateway.model.AccountUnstakesRequest;
import live.radix.gateway.model.AccountUnstakesResponse;
import live.radix.gateway.model.ErrorResponse;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-21T06:41:39.744899+03:00[Europe/Kiev]")
public class AccountApi {
  private ApiClient apiClient;

  public AccountApi() {
    this(Configuration.getDefaultApiClient());
  }

  public AccountApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get Account Balances
   * Returns an account&#39;s available and staked token balances, given an account address. If an account address is valid, but doesn&#39;t have any ledger transactions against it, this endpoint still returns a successful response. 
   * @param accountBalancesRequest  (required)
   * @return AccountBalancesResponse
   * @throws ApiException if fails to make API call
   */
  public AccountBalancesResponse accountBalancesPost(AccountBalancesRequest accountBalancesRequest) throws ApiException {
    Object localVarPostBody = accountBalancesRequest;
    
    // verify the required parameter 'accountBalancesRequest' is set
    if (accountBalancesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'accountBalancesRequest' when calling accountBalancesPost");
    }
    
    // create path and map variables
    String localVarPath = "/account/balances";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AccountBalancesResponse> localVarReturnType = new TypeReference<AccountBalancesResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Derive Account Identifier
   * Returns the account address associated with the given public key.
   * @param accountDeriveRequest  (required)
   * @return AccountDeriveResponse
   * @throws ApiException if fails to make API call
   */
  public AccountDeriveResponse accountDerivePost(AccountDeriveRequest accountDeriveRequest) throws ApiException {
    Object localVarPostBody = accountDeriveRequest;
    
    // verify the required parameter 'accountDeriveRequest' is set
    if (accountDeriveRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'accountDeriveRequest' when calling accountDerivePost");
    }
    
    // create path and map variables
    String localVarPath = "/account/derive";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AccountDeriveResponse> localVarReturnType = new TypeReference<AccountDeriveResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Get Stake Positions
   * Returns the xrd which the account has in pending and active delegated stake positions with validators, given an account address. If an account address is valid, but doesn&#39;t have any ledger transactions against it, this endpoint still returns a successful response. 
   * @param accountStakesRequest  (required)
   * @return AccountStakesResponse
   * @throws ApiException if fails to make API call
   */
  public AccountStakesResponse accountStakesPost(AccountStakesRequest accountStakesRequest) throws ApiException {
    Object localVarPostBody = accountStakesRequest;
    
    // verify the required parameter 'accountStakesRequest' is set
    if (accountStakesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'accountStakesRequest' when calling accountStakesPost");
    }
    
    // create path and map variables
    String localVarPath = "/account/stakes";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AccountStakesResponse> localVarReturnType = new TypeReference<AccountStakesResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Get Account Transactions
   * Returns user-initiated transactions involving the given account address which have been succesfully committed to the ledger. The transactions are returned in a paginated format, ordered by most recent. If an account address is valid, but doesn&#39;t have any ledger transactions against it, this endpoint still returns a successful response. 
   * @param accountTransactionsRequest  (required)
   * @return AccountTransactionsResponse
   * @throws ApiException if fails to make API call
   */
  public AccountTransactionsResponse accountTransactionsPost(AccountTransactionsRequest accountTransactionsRequest) throws ApiException {
    Object localVarPostBody = accountTransactionsRequest;
    
    // verify the required parameter 'accountTransactionsRequest' is set
    if (accountTransactionsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'accountTransactionsRequest' when calling accountTransactionsPost");
    }
    
    // create path and map variables
    String localVarPath = "/account/transactions";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AccountTransactionsResponse> localVarReturnType = new TypeReference<AccountTransactionsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Get Unstake Positions
   * Returns the xrd which the account has in pending and temporarily-locked delegated unstake positions with validators, given an account address. If an account address is valid, but doesn&#39;t have any ledger transactions against it, this endpoint still returns a successful response. 
   * @param accountUnstakesRequest  (required)
   * @return AccountUnstakesResponse
   * @throws ApiException if fails to make API call
   */
  public AccountUnstakesResponse accountUnstakesPost(AccountUnstakesRequest accountUnstakesRequest) throws ApiException {
    Object localVarPostBody = accountUnstakesRequest;
    
    // verify the required parameter 'accountUnstakesRequest' is set
    if (accountUnstakesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'accountUnstakesRequest' when calling accountUnstakesPost");
    }
    
    // create path and map variables
    String localVarPath = "/account/unstakes";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AccountUnstakesResponse> localVarReturnType = new TypeReference<AccountUnstakesResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
