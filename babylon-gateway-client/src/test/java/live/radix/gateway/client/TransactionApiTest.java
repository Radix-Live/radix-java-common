/*
 * Babylon Gateway API - RCnet V3
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers. For simple use cases, you can typically use the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs-babylon.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal. 
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.gateway.client;

import live.radix.gateway.ApiException;
import live.radix.gateway.model.ErrorResponse;
import live.radix.gateway.model.TransactionCommittedDetailsRequest;
import live.radix.gateway.model.TransactionCommittedDetailsResponse;
import live.radix.gateway.model.TransactionConstructionResponse;
import live.radix.gateway.model.TransactionPreviewRequest;
import live.radix.gateway.model.TransactionPreviewResponse;
import live.radix.gateway.model.TransactionStatusRequest;
import live.radix.gateway.model.TransactionStatusResponse;
import live.radix.gateway.model.TransactionSubmitRequest;
import live.radix.gateway.model.TransactionSubmitResponse;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionApi
 */
@Ignore
public class TransactionApiTest {

    private final TransactionApi api = new TransactionApi();

    /**
     * Get Committed Transaction Details
     *
     * Returns the committed details and receipt of the transaction for a given transaction identifier. Transaction identifiers which don&#39;t correspond to a committed transaction will return a &#x60;TransactionNotFoundError&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionCommittedDetailsTest() throws ApiException {
        TransactionCommittedDetailsRequest transactionCommittedDetailsRequest = null;
        TransactionCommittedDetailsResponse response = api.transactionCommittedDetails(transactionCommittedDetailsRequest);

        // TODO: test validations
    }
    /**
     * Get Construction Metadata
     *
     * Returns information needed to construct a new transaction including current &#x60;epoch&#x60; number. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionConstructionTest() throws ApiException {
        TransactionConstructionResponse response = api.transactionConstruction();

        // TODO: test validations
    }
    /**
     * Preview Transaction
     *
     * Previews transaction against the network. This endpoint is effectively a proxy towards CoreApi&#39;s &#x60;/v0/transaction/preview&#x60; endpoint. See CoreApi&#39;s documentation for more details. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionPreviewTest() throws ApiException {
        TransactionPreviewRequest transactionPreviewRequest = null;
        TransactionPreviewResponse response = api.transactionPreview(transactionPreviewRequest);

        // TODO: test validations
    }
    /**
     * Get Transaction Status
     *
     * Returns overall transaction status and all of its known payloads based on supplied intent hash. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionStatusTest() throws ApiException {
        TransactionStatusRequest transactionStatusRequest = null;
        TransactionStatusResponse response = api.transactionStatus(transactionStatusRequest);

        // TODO: test validations
    }
    /**
     * Submit Transaction
     *
     * Submits a signed transaction payload to the network. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionSubmitTest() throws ApiException {
        TransactionSubmitRequest transactionSubmitRequest = null;
        TransactionSubmitResponse response = api.transactionSubmit(transactionSubmitRequest);

        // TODO: test validations
    }
}
