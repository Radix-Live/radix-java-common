/*
 * Babylon Gateway API - RCnet V3
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers. For simple use cases, you can typically use the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs-babylon.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal. 
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.gateway.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import live.radix.gateway.model.PublicKey;
import live.radix.gateway.model.TransactionPreviewRequestFlags;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for TransactionPreviewRequest
 */
public class TransactionPreviewRequestTest {
    private final TransactionPreviewRequest model = new TransactionPreviewRequest();

    /**
     * Model tests for TransactionPreviewRequest
     */
    @Test
    public void testTransactionPreviewRequest() {
        // TODO: test TransactionPreviewRequest
    }

    /**
     * Test the property 'manifest'
     */
    @Test
    public void manifestTest() {
        // TODO: test manifest
    }

    /**
     * Test the property 'blobsHex'
     */
    @Test
    public void blobsHexTest() {
        // TODO: test blobsHex
    }

    /**
     * Test the property 'startEpochInclusive'
     */
    @Test
    public void startEpochInclusiveTest() {
        // TODO: test startEpochInclusive
    }

    /**
     * Test the property 'endEpochExclusive'
     */
    @Test
    public void endEpochExclusiveTest() {
        // TODO: test endEpochExclusive
    }

    /**
     * Test the property 'notaryPublicKey'
     */
    @Test
    public void notaryPublicKeyTest() {
        // TODO: test notaryPublicKey
    }

    /**
     * Test the property 'notaryIsSignatory'
     */
    @Test
    public void notaryIsSignatoryTest() {
        // TODO: test notaryIsSignatory
    }

    /**
     * Test the property 'tipPercentage'
     */
    @Test
    public void tipPercentageTest() {
        // TODO: test tipPercentage
    }

    /**
     * Test the property 'nonce'
     */
    @Test
    public void nonceTest() {
        // TODO: test nonce
    }

    /**
     * Test the property 'signerPublicKeys'
     */
    @Test
    public void signerPublicKeysTest() {
        // TODO: test signerPublicKeys
    }

    /**
     * Test the property 'flags'
     */
    @Test
    public void flagsTest() {
        // TODO: test flags
    }

}
