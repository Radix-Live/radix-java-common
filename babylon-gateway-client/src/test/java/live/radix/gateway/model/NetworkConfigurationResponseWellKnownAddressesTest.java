/*
 * Radix Gateway API - Babylon
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers, and for light queries from front-end dApps. For exchange/asset integrations, back-end dApp integrations, or simple use cases, you should consider using the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  All responses may have additional fields added at any release, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects.  When the Radix protocol is updated, new functionality may be added, and so discriminated unions returned by the API may need to be updated to have new variants added, corresponding to the updated data. Clients may need to update in advance to be able to handle these new variants when a protocol update comes out.  On the very rare occasions we need to make breaking changes to the API, these will be warned in advance with deprecation notices on previous versions. These deprecation notices will include a safe migration path. Deprecation notes or breaking changes will be flagged clearly in release notes for new versions of the Gateway.  The Gateway DB schema is not subject to any compatibility guarantees, and may be changed at any release. DB changes will be flagged in the release notes so clients doing custom DB integrations can prepare. 
 *
 * The version of the OpenAPI document: v1.9.0-L
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.gateway.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for NetworkConfigurationResponseWellKnownAddresses
 */
class NetworkConfigurationResponseWellKnownAddressesTest {
    private final NetworkConfigurationResponseWellKnownAddresses model = new NetworkConfigurationResponseWellKnownAddresses();

    /**
     * Model tests for NetworkConfigurationResponseWellKnownAddresses
     */
    @Test
    void testNetworkConfigurationResponseWellKnownAddresses() {
        // TODO: test NetworkConfigurationResponseWellKnownAddresses
    }

    /**
     * Test the property 'xrd'
     */
    @Test
    void xrdTest() {
        // TODO: test xrd
    }

    /**
     * Test the property 'secp256k1SignatureVirtualBadge'
     */
    @Test
    void secp256k1SignatureVirtualBadgeTest() {
        // TODO: test secp256k1SignatureVirtualBadge
    }

    /**
     * Test the property 'ed25519SignatureVirtualBadge'
     */
    @Test
    void ed25519SignatureVirtualBadgeTest() {
        // TODO: test ed25519SignatureVirtualBadge
    }

    /**
     * Test the property 'packageOfDirectCallerVirtualBadge'
     */
    @Test
    void packageOfDirectCallerVirtualBadgeTest() {
        // TODO: test packageOfDirectCallerVirtualBadge
    }

    /**
     * Test the property 'globalCallerVirtualBadge'
     */
    @Test
    void globalCallerVirtualBadgeTest() {
        // TODO: test globalCallerVirtualBadge
    }

    /**
     * Test the property 'systemTransactionBadge'
     */
    @Test
    void systemTransactionBadgeTest() {
        // TODO: test systemTransactionBadge
    }

    /**
     * Test the property 'packageOwnerBadge'
     */
    @Test
    void packageOwnerBadgeTest() {
        // TODO: test packageOwnerBadge
    }

    /**
     * Test the property 'validatorOwnerBadge'
     */
    @Test
    void validatorOwnerBadgeTest() {
        // TODO: test validatorOwnerBadge
    }

    /**
     * Test the property 'accountOwnerBadge'
     */
    @Test
    void accountOwnerBadgeTest() {
        // TODO: test accountOwnerBadge
    }

    /**
     * Test the property 'identityOwnerBadge'
     */
    @Test
    void identityOwnerBadgeTest() {
        // TODO: test identityOwnerBadge
    }

    /**
     * Test the property 'packagePackage'
     */
    @Test
    void packagePackageTest() {
        // TODO: test packagePackage
    }

    /**
     * Test the property 'resourcePackage'
     */
    @Test
    void resourcePackageTest() {
        // TODO: test resourcePackage
    }

    /**
     * Test the property 'accountPackage'
     */
    @Test
    void accountPackageTest() {
        // TODO: test accountPackage
    }

    /**
     * Test the property 'identityPackage'
     */
    @Test
    void identityPackageTest() {
        // TODO: test identityPackage
    }

    /**
     * Test the property 'consensusManagerPackage'
     */
    @Test
    void consensusManagerPackageTest() {
        // TODO: test consensusManagerPackage
    }

    /**
     * Test the property 'accessControllerPackage'
     */
    @Test
    void accessControllerPackageTest() {
        // TODO: test accessControllerPackage
    }

    /**
     * Test the property 'transactionProcessorPackage'
     */
    @Test
    void transactionProcessorPackageTest() {
        // TODO: test transactionProcessorPackage
    }

    /**
     * Test the property 'metadataModulePackage'
     */
    @Test
    void metadataModulePackageTest() {
        // TODO: test metadataModulePackage
    }

    /**
     * Test the property 'royaltyModulePackage'
     */
    @Test
    void royaltyModulePackageTest() {
        // TODO: test royaltyModulePackage
    }

    /**
     * Test the property 'accessRulesPackage'
     */
    @Test
    void accessRulesPackageTest() {
        // TODO: test accessRulesPackage
    }

    /**
     * Test the property 'roleAssignmentModulePackage'
     */
    @Test
    void roleAssignmentModulePackageTest() {
        // TODO: test roleAssignmentModulePackage
    }

    /**
     * Test the property 'genesisHelperPackage'
     */
    @Test
    void genesisHelperPackageTest() {
        // TODO: test genesisHelperPackage
    }

    /**
     * Test the property 'faucetPackage'
     */
    @Test
    void faucetPackageTest() {
        // TODO: test faucetPackage
    }

    /**
     * Test the property 'consensusManager'
     */
    @Test
    void consensusManagerTest() {
        // TODO: test consensusManager
    }

    /**
     * Test the property 'genesisHelper'
     */
    @Test
    void genesisHelperTest() {
        // TODO: test genesisHelper
    }

    /**
     * Test the property 'faucet'
     */
    @Test
    void faucetTest() {
        // TODO: test faucet
    }

    /**
     * Test the property 'poolPackage'
     */
    @Test
    void poolPackageTest() {
        // TODO: test poolPackage
    }

    /**
     * Test the property 'lockerPackage'
     */
    @Test
    void lockerPackageTest() {
        // TODO: test lockerPackage
    }

    /**
     * Test the property 'transactionTracker'
     */
    @Test
    void transactionTrackerTest() {
        // TODO: test transactionTracker
    }

    /**
     * Test the property 'transactionTrackerPackage'
     */
    @Test
    void transactionTrackerPackageTest() {
        // TODO: test transactionTrackerPackage
    }

    /**
     * Test the property 'testUtilsPackage'
     */
    @Test
    void testUtilsPackageTest() {
        // TODO: test testUtilsPackage
    }

}
