/*
 * Radix Gateway API - Babylon
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers, and for light queries from front-end dApps. For exchange/asset integrations, back-end dApp integrations, or simple use cases, you should consider using the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  All responses may have additional fields added at any release, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects.  When the Radix protocol is updated, new functionality may be added, and so discriminated unions returned by the API may need to be updated to have new variants added, corresponding to the updated data. Clients may need to update in advance to be able to handle these new variants when a protocol update comes out.  On the very rare occasions we need to make breaking changes to the API, these will be warned in advance with deprecation notices on previous versions. These deprecation notices will include a safe migration path. Deprecation notes or breaking changes will be flagged clearly in release notes for new versions of the Gateway.  The Gateway DB schema is not subject to any compatibility guarantees, and may be changed at any release. DB changes will be flagged in the release notes so clients doing custom DB integrations can prepare. 
 *
 * The version of the OpenAPI document: v1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package live.radix.gateway.client;

import com.fasterxml.jackson.core.type.TypeReference;

import live.radix.gateway.ApiException;
import live.radix.gateway.ApiClient;
import live.radix.gateway.Configuration;
import live.radix.gateway.model.*;
import live.radix.gateway.Pair;

import live.radix.gateway.model.ErrorResponse;
import live.radix.gateway.model.StateEntityDetailsRequest;
import live.radix.gateway.model.StateEntityDetailsResponse;
import live.radix.gateway.model.StateEntityFungibleResourceVaultsPageRequest;
import live.radix.gateway.model.StateEntityFungibleResourceVaultsPageResponse;
import live.radix.gateway.model.StateEntityFungiblesPageRequest;
import live.radix.gateway.model.StateEntityFungiblesPageResponse;
import live.radix.gateway.model.StateEntityMetadataPageRequest;
import live.radix.gateway.model.StateEntityMetadataPageResponse;
import live.radix.gateway.model.StateEntityNonFungibleIdsPageRequest;
import live.radix.gateway.model.StateEntityNonFungibleIdsPageResponse;
import live.radix.gateway.model.StateEntityNonFungibleResourceVaultsPageRequest;
import live.radix.gateway.model.StateEntityNonFungibleResourceVaultsPageResponse;
import live.radix.gateway.model.StateEntityNonFungiblesPageRequest;
import live.radix.gateway.model.StateEntityNonFungiblesPageResponse;
import live.radix.gateway.model.StateKeyValueStoreDataRequest;
import live.radix.gateway.model.StateKeyValueStoreDataResponse;
import live.radix.gateway.model.StateNonFungibleDataRequest;
import live.radix.gateway.model.StateNonFungibleDataResponse;
import live.radix.gateway.model.StateNonFungibleIdsRequest;
import live.radix.gateway.model.StateNonFungibleIdsResponse;
import live.radix.gateway.model.StateNonFungibleLocationRequest;
import live.radix.gateway.model.StateNonFungibleLocationResponse;
import live.radix.gateway.model.StateValidatorsListRequest;
import live.radix.gateway.model.StateValidatorsListResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-06T18:53:11.950430200+02:00[Europe/Kiev]")
public class StateApi {


  private ApiClient apiClient;

  public StateApi() {
    this(Configuration.getDefaultApiClient());
  }

  public StateApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get vault page of Entity Fungible resource aggregated per vault
   * Returns vaults for fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource&#39;s first appearance on the ledger. 
   * @param stateEntityFungibleResourceVaultsPageRequest  (required)
   * @return StateEntityFungibleResourceVaultsPageResponse
   * @throws ApiException if fails to make API call
   */
  public StateEntityFungibleResourceVaultsPageResponse entityFungibleResourceVaultPage(StateEntityFungibleResourceVaultsPageRequest stateEntityFungibleResourceVaultsPageRequest) throws ApiException {
    return this.entityFungibleResourceVaultPage(stateEntityFungibleResourceVaultsPageRequest, Collections.emptyMap());
  }


  /**
   * Get vault page of Entity Fungible resource aggregated per vault
   * Returns vaults for fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource&#39;s first appearance on the ledger. 
   * @param stateEntityFungibleResourceVaultsPageRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateEntityFungibleResourceVaultsPageResponse
   * @throws ApiException if fails to make API call
   */
  public StateEntityFungibleResourceVaultsPageResponse entityFungibleResourceVaultPage(StateEntityFungibleResourceVaultsPageRequest stateEntityFungibleResourceVaultsPageRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateEntityFungibleResourceVaultsPageRequest;
    
    // verify the required parameter 'stateEntityFungibleResourceVaultsPageRequest' is set
    if (stateEntityFungibleResourceVaultsPageRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateEntityFungibleResourceVaultsPageRequest' when calling entityFungibleResourceVaultPage");
    }
    
    // create path and map variables
    String localVarPath = "/state/entity/page/fungible-vaults/";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateEntityFungibleResourceVaultsPageResponse> localVarReturnType = new TypeReference<StateEntityFungibleResourceVaultsPageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Entity Fungible Resource Totals Page aggregated globally
   * Returns the total amount of each fungible resource owned by a given global entity. Result can be aggregated globally or per vault. The returned response is in a paginated format, ordered by the resource&#39;s first appearance on the ledger. 
   * @param stateEntityFungiblesPageRequest  (required)
   * @return StateEntityFungiblesPageResponse
   * @throws ApiException if fails to make API call
   */
  public StateEntityFungiblesPageResponse entityFungiblesPage(StateEntityFungiblesPageRequest stateEntityFungiblesPageRequest) throws ApiException {
    return this.entityFungiblesPage(stateEntityFungiblesPageRequest, Collections.emptyMap());
  }


  /**
   * Get Entity Fungible Resource Totals Page aggregated globally
   * Returns the total amount of each fungible resource owned by a given global entity. Result can be aggregated globally or per vault. The returned response is in a paginated format, ordered by the resource&#39;s first appearance on the ledger. 
   * @param stateEntityFungiblesPageRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateEntityFungiblesPageResponse
   * @throws ApiException if fails to make API call
   */
  public StateEntityFungiblesPageResponse entityFungiblesPage(StateEntityFungiblesPageRequest stateEntityFungiblesPageRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateEntityFungiblesPageRequest;
    
    // verify the required parameter 'stateEntityFungiblesPageRequest' is set
    if (stateEntityFungiblesPageRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateEntityFungiblesPageRequest' when calling entityFungiblesPage");
    }
    
    // create path and map variables
    String localVarPath = "/state/entity/page/fungibles/";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateEntityFungiblesPageResponse> localVarReturnType = new TypeReference<StateEntityFungiblesPageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Entity Metadata Page
   * Returns all the metadata properties associated with a given global entity. The returned response is in a paginated format, ordered by first appearance on the ledger. 
   * @param stateEntityMetadataPageRequest  (required)
   * @return StateEntityMetadataPageResponse
   * @throws ApiException if fails to make API call
   */
  public StateEntityMetadataPageResponse entityMetadataPage(StateEntityMetadataPageRequest stateEntityMetadataPageRequest) throws ApiException {
    return this.entityMetadataPage(stateEntityMetadataPageRequest, Collections.emptyMap());
  }


  /**
   * Get Entity Metadata Page
   * Returns all the metadata properties associated with a given global entity. The returned response is in a paginated format, ordered by first appearance on the ledger. 
   * @param stateEntityMetadataPageRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateEntityMetadataPageResponse
   * @throws ApiException if fails to make API call
   */
  public StateEntityMetadataPageResponse entityMetadataPage(StateEntityMetadataPageRequest stateEntityMetadataPageRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateEntityMetadataPageRequest;
    
    // verify the required parameter 'stateEntityMetadataPageRequest' is set
    if (stateEntityMetadataPageRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateEntityMetadataPageRequest' when calling entityMetadataPage");
    }
    
    // create path and map variables
    String localVarPath = "/state/entity/page/metadata";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateEntityMetadataPageResponse> localVarReturnType = new TypeReference<StateEntityMetadataPageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Entity Non-Fungible IDs
   * Returns all non-fungible IDs of a given non-fungible resource owned by a given entity. The returned response is in a paginated format, ordered by the resource&#39;s first appearence on the ledger. 
   * @param stateEntityNonFungibleIdsPageRequest  (required)
   * @return StateEntityNonFungibleIdsPageResponse
   * @throws ApiException if fails to make API call
   */
  public StateEntityNonFungibleIdsPageResponse entityNonFungibleIdsPage(StateEntityNonFungibleIdsPageRequest stateEntityNonFungibleIdsPageRequest) throws ApiException {
    return this.entityNonFungibleIdsPage(stateEntityNonFungibleIdsPageRequest, Collections.emptyMap());
  }


  /**
   * Get Entity Non-Fungible IDs
   * Returns all non-fungible IDs of a given non-fungible resource owned by a given entity. The returned response is in a paginated format, ordered by the resource&#39;s first appearence on the ledger. 
   * @param stateEntityNonFungibleIdsPageRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateEntityNonFungibleIdsPageResponse
   * @throws ApiException if fails to make API call
   */
  public StateEntityNonFungibleIdsPageResponse entityNonFungibleIdsPage(StateEntityNonFungibleIdsPageRequest stateEntityNonFungibleIdsPageRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateEntityNonFungibleIdsPageRequest;
    
    // verify the required parameter 'stateEntityNonFungibleIdsPageRequest' is set
    if (stateEntityNonFungibleIdsPageRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateEntityNonFungibleIdsPageRequest' when calling entityNonFungibleIdsPage");
    }
    
    // create path and map variables
    String localVarPath = "/state/entity/page/non-fungible-vault/ids";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateEntityNonFungibleIdsPageResponse> localVarReturnType = new TypeReference<StateEntityNonFungibleIdsPageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get vault page of Entity Non Fungible aggregated per vault
   * Returns vaults for non fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource&#39;s first appearance on the ledger. 
   * @param stateEntityNonFungibleResourceVaultsPageRequest  (required)
   * @return StateEntityNonFungibleResourceVaultsPageResponse
   * @throws ApiException if fails to make API call
   */
  public StateEntityNonFungibleResourceVaultsPageResponse entityNonFungibleResourceVaultPage(StateEntityNonFungibleResourceVaultsPageRequest stateEntityNonFungibleResourceVaultsPageRequest) throws ApiException {
    return this.entityNonFungibleResourceVaultPage(stateEntityNonFungibleResourceVaultsPageRequest, Collections.emptyMap());
  }


  /**
   * Get vault page of Entity Non Fungible aggregated per vault
   * Returns vaults for non fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource&#39;s first appearance on the ledger. 
   * @param stateEntityNonFungibleResourceVaultsPageRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateEntityNonFungibleResourceVaultsPageResponse
   * @throws ApiException if fails to make API call
   */
  public StateEntityNonFungibleResourceVaultsPageResponse entityNonFungibleResourceVaultPage(StateEntityNonFungibleResourceVaultsPageRequest stateEntityNonFungibleResourceVaultsPageRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateEntityNonFungibleResourceVaultsPageRequest;
    
    // verify the required parameter 'stateEntityNonFungibleResourceVaultsPageRequest' is set
    if (stateEntityNonFungibleResourceVaultsPageRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateEntityNonFungibleResourceVaultsPageRequest' when calling entityNonFungibleResourceVaultPage");
    }
    
    // create path and map variables
    String localVarPath = "/state/entity/page/non-fungible-vaults/";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateEntityNonFungibleResourceVaultsPageResponse> localVarReturnType = new TypeReference<StateEntityNonFungibleResourceVaultsPageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Entity Non-Fungible Resource Totals Page aggregated globally
   * Returns the total amount of each non-fungible resource owned by a given global entity. Result can be aggregated globally or per vault. The returned response is in a paginated format, ordered by the resource&#39;s first appearance on the ledger. 
   * @param stateEntityNonFungiblesPageRequest  (required)
   * @return StateEntityNonFungiblesPageResponse
   * @throws ApiException if fails to make API call
   */
  public StateEntityNonFungiblesPageResponse entityNonFungiblesPage(StateEntityNonFungiblesPageRequest stateEntityNonFungiblesPageRequest) throws ApiException {
    return this.entityNonFungiblesPage(stateEntityNonFungiblesPageRequest, Collections.emptyMap());
  }


  /**
   * Get Entity Non-Fungible Resource Totals Page aggregated globally
   * Returns the total amount of each non-fungible resource owned by a given global entity. Result can be aggregated globally or per vault. The returned response is in a paginated format, ordered by the resource&#39;s first appearance on the ledger. 
   * @param stateEntityNonFungiblesPageRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateEntityNonFungiblesPageResponse
   * @throws ApiException if fails to make API call
   */
  public StateEntityNonFungiblesPageResponse entityNonFungiblesPage(StateEntityNonFungiblesPageRequest stateEntityNonFungiblesPageRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateEntityNonFungiblesPageRequest;
    
    // verify the required parameter 'stateEntityNonFungiblesPageRequest' is set
    if (stateEntityNonFungiblesPageRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateEntityNonFungiblesPageRequest' when calling entityNonFungiblesPage");
    }
    
    // create path and map variables
    String localVarPath = "/state/entity/page/non-fungibles/";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateEntityNonFungiblesPageResponse> localVarReturnType = new TypeReference<StateEntityNonFungiblesPageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get KeyValueStore Data
   * Returns data (value) associated with a given key of a given key-value store. 
   * @param stateKeyValueStoreDataRequest  (required)
   * @return StateKeyValueStoreDataResponse
   * @throws ApiException if fails to make API call
   */
  public StateKeyValueStoreDataResponse keyValueStoreData(StateKeyValueStoreDataRequest stateKeyValueStoreDataRequest) throws ApiException {
    return this.keyValueStoreData(stateKeyValueStoreDataRequest, Collections.emptyMap());
  }


  /**
   * Get KeyValueStore Data
   * Returns data (value) associated with a given key of a given key-value store. 
   * @param stateKeyValueStoreDataRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateKeyValueStoreDataResponse
   * @throws ApiException if fails to make API call
   */
  public StateKeyValueStoreDataResponse keyValueStoreData(StateKeyValueStoreDataRequest stateKeyValueStoreDataRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateKeyValueStoreDataRequest;
    
    // verify the required parameter 'stateKeyValueStoreDataRequest' is set
    if (stateKeyValueStoreDataRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateKeyValueStoreDataRequest' when calling keyValueStoreData");
    }
    
    // create path and map variables
    String localVarPath = "/state/key-value-store/data";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateKeyValueStoreDataResponse> localVarReturnType = new TypeReference<StateKeyValueStoreDataResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Non-Fungible Data
   * Returns data associated with a given non-fungible ID of a given non-fungible resource. 
   * @param stateNonFungibleDataRequest  (required)
   * @return StateNonFungibleDataResponse
   * @throws ApiException if fails to make API call
   */
  public StateNonFungibleDataResponse nonFungibleData(StateNonFungibleDataRequest stateNonFungibleDataRequest) throws ApiException {
    return this.nonFungibleData(stateNonFungibleDataRequest, Collections.emptyMap());
  }


  /**
   * Get Non-Fungible Data
   * Returns data associated with a given non-fungible ID of a given non-fungible resource. 
   * @param stateNonFungibleDataRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateNonFungibleDataResponse
   * @throws ApiException if fails to make API call
   */
  public StateNonFungibleDataResponse nonFungibleData(StateNonFungibleDataRequest stateNonFungibleDataRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateNonFungibleDataRequest;
    
    // verify the required parameter 'stateNonFungibleDataRequest' is set
    if (stateNonFungibleDataRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateNonFungibleDataRequest' when calling nonFungibleData");
    }
    
    // create path and map variables
    String localVarPath = "/state/non-fungible/data";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateNonFungibleDataResponse> localVarReturnType = new TypeReference<StateNonFungibleDataResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Non-Fungible Collection
   * Returns the non-fungible IDs of a given non-fungible resource. Returned response is in a paginated format, ordered by their first appearance on the ledger. 
   * @param stateNonFungibleIdsRequest  (required)
   * @return StateNonFungibleIdsResponse
   * @throws ApiException if fails to make API call
   */
  public StateNonFungibleIdsResponse nonFungibleIds(StateNonFungibleIdsRequest stateNonFungibleIdsRequest) throws ApiException {
    return this.nonFungibleIds(stateNonFungibleIdsRequest, Collections.emptyMap());
  }


  /**
   * Get Non-Fungible Collection
   * Returns the non-fungible IDs of a given non-fungible resource. Returned response is in a paginated format, ordered by their first appearance on the ledger. 
   * @param stateNonFungibleIdsRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateNonFungibleIdsResponse
   * @throws ApiException if fails to make API call
   */
  public StateNonFungibleIdsResponse nonFungibleIds(StateNonFungibleIdsRequest stateNonFungibleIdsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateNonFungibleIdsRequest;
    
    // verify the required parameter 'stateNonFungibleIdsRequest' is set
    if (stateNonFungibleIdsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateNonFungibleIdsRequest' when calling nonFungibleIds");
    }
    
    // create path and map variables
    String localVarPath = "/state/non-fungible/ids";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateNonFungibleIdsResponse> localVarReturnType = new TypeReference<StateNonFungibleIdsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Non-Fungible Location
   * Returns location of a given non-fungible ID. 
   * @param stateNonFungibleLocationRequest  (required)
   * @return StateNonFungibleLocationResponse
   * @throws ApiException if fails to make API call
   */
  public StateNonFungibleLocationResponse nonFungibleLocation(StateNonFungibleLocationRequest stateNonFungibleLocationRequest) throws ApiException {
    return this.nonFungibleLocation(stateNonFungibleLocationRequest, Collections.emptyMap());
  }


  /**
   * Get Non-Fungible Location
   * Returns location of a given non-fungible ID. 
   * @param stateNonFungibleLocationRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateNonFungibleLocationResponse
   * @throws ApiException if fails to make API call
   */
  public StateNonFungibleLocationResponse nonFungibleLocation(StateNonFungibleLocationRequest stateNonFungibleLocationRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateNonFungibleLocationRequest;
    
    // verify the required parameter 'stateNonFungibleLocationRequest' is set
    if (stateNonFungibleLocationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateNonFungibleLocationRequest' when calling nonFungibleLocation");
    }
    
    // create path and map variables
    String localVarPath = "/state/non-fungible/location";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateNonFungibleLocationResponse> localVarReturnType = new TypeReference<StateNonFungibleLocationResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Entity Details
   * Returns detailed information for collection of entities. Aggregate resources globally by default. 
   * @param stateEntityDetailsRequest  (required)
   * @return StateEntityDetailsResponse
   * @throws ApiException if fails to make API call
   */
  public StateEntityDetailsResponse stateEntityDetails(StateEntityDetailsRequest stateEntityDetailsRequest) throws ApiException {
    return this.stateEntityDetails(stateEntityDetailsRequest, Collections.emptyMap());
  }


  /**
   * Get Entity Details
   * Returns detailed information for collection of entities. Aggregate resources globally by default. 
   * @param stateEntityDetailsRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateEntityDetailsResponse
   * @throws ApiException if fails to make API call
   */
  public StateEntityDetailsResponse stateEntityDetails(StateEntityDetailsRequest stateEntityDetailsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateEntityDetailsRequest;
    
    // verify the required parameter 'stateEntityDetailsRequest' is set
    if (stateEntityDetailsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateEntityDetailsRequest' when calling stateEntityDetails");
    }
    
    // create path and map variables
    String localVarPath = "/state/entity/details";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateEntityDetailsResponse> localVarReturnType = new TypeReference<StateEntityDetailsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Validators List
   * 
   * @param stateValidatorsListRequest  (required)
   * @return StateValidatorsListResponse
   * @throws ApiException if fails to make API call
   */
  public StateValidatorsListResponse stateValidatorsList(StateValidatorsListRequest stateValidatorsListRequest) throws ApiException {
    return this.stateValidatorsList(stateValidatorsListRequest, Collections.emptyMap());
  }


  /**
   * Get Validators List
   * 
   * @param stateValidatorsListRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateValidatorsListResponse
   * @throws ApiException if fails to make API call
   */
  public StateValidatorsListResponse stateValidatorsList(StateValidatorsListRequest stateValidatorsListRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateValidatorsListRequest;
    
    // verify the required parameter 'stateValidatorsListRequest' is set
    if (stateValidatorsListRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateValidatorsListRequest' when calling stateValidatorsList");
    }
    
    // create path and map variables
    String localVarPath = "/state/validators/list";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateValidatorsListResponse> localVarReturnType = new TypeReference<StateValidatorsListResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
