/*
 * Radix Gateway API - Babylon
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers, and for light queries from front-end dApps. For exchange/asset integrations, back-end dApp integrations, or simple use cases, you should consider using the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  All responses may have additional fields added at any release, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects.  When the Radix protocol is updated, new functionality may be added, and so discriminated unions returned by the API may need to be updated to have new variants added, corresponding to the updated data. Clients may need to update in advance to be able to handle these new variants when a protocol update comes out.  On the very rare occasions we need to make breaking changes to the API, these will be warned in advance with deprecation notices on previous versions. These deprecation notices will include a safe migration path. Deprecation notes or breaking changes will be flagged clearly in release notes for new versions of the Gateway.  The Gateway DB schema is not subject to any compatibility guarantees, and may be changed at any release. DB changes will be flagged in the release notes so clients doing custom DB integrations can prepare. 
 *
 * The version of the OpenAPI document: v1.9.0-L
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.gateway.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Optional. This allows for a request to be made against a historic state. If a constraint is specified, the Gateway will resolve the request against the ledger state at that time. If not specified, requests will be made with respect to the top of the committed ledger. 
 */
@JsonPropertyOrder({
  LedgerStateSelector.JSON_PROPERTY_STATE_VERSION,
  LedgerStateSelector.JSON_PROPERTY_TIMESTAMP,
  LedgerStateSelector.JSON_PROPERTY_EPOCH,
  LedgerStateSelector.JSON_PROPERTY_ROUND
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T13:09:04.159608300+02:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class LedgerStateSelector {
  public static final String JSON_PROPERTY_STATE_VERSION = "state_version";
  private JsonNullable<Long> stateVersion = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private JsonNullable<OffsetDateTime> timestamp = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_EPOCH = "epoch";
  private JsonNullable<Long> epoch = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_ROUND = "round";
  private JsonNullable<Long> round = JsonNullable.<Long>undefined();

  public LedgerStateSelector() {
  }

  public LedgerStateSelector stateVersion(Long stateVersion) {
    this.stateVersion = JsonNullable.<Long>of(stateVersion);
    
    return this;
  }

  /**
   * If provided, the latest ledger state lower than or equal to the given state version is returned.
   * minimum: 1
   * maximum: 100000000000000
   * @return stateVersion
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Long getStateVersion() {
        return stateVersion.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STATE_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getStateVersion_JsonNullable() {
    return stateVersion;
  }
  
  @JsonProperty(JSON_PROPERTY_STATE_VERSION)
  public void setStateVersion_JsonNullable(JsonNullable<Long> stateVersion) {
    this.stateVersion = stateVersion;
  }

  public void setStateVersion(Long stateVersion) {
    this.stateVersion = JsonNullable.<Long>of(stateVersion);
  }

  public LedgerStateSelector timestamp(OffsetDateTime timestamp) {
    this.timestamp = JsonNullable.<OffsetDateTime>of(timestamp);
    
    return this;
  }

  /**
   * If provided, the latest ledger state lower than or equal to the given round timestamp is returned.
   * @return timestamp
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getTimestamp() {
        return timestamp.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getTimestamp_JsonNullable() {
    return timestamp;
  }
  
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  public void setTimestamp_JsonNullable(JsonNullable<OffsetDateTime> timestamp) {
    this.timestamp = timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = JsonNullable.<OffsetDateTime>of(timestamp);
  }

  public LedgerStateSelector epoch(Long epoch) {
    this.epoch = JsonNullable.<Long>of(epoch);
    
    return this;
  }

  /**
   * If provided, the ledger state lower than or equal to the given epoch at round 0 is returned.
   * minimum: 0
   * maximum: 10000000000
   * @return epoch
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Long getEpoch() {
        return epoch.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EPOCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getEpoch_JsonNullable() {
    return epoch;
  }
  
  @JsonProperty(JSON_PROPERTY_EPOCH)
  public void setEpoch_JsonNullable(JsonNullable<Long> epoch) {
    this.epoch = epoch;
  }

  public void setEpoch(Long epoch) {
    this.epoch = JsonNullable.<Long>of(epoch);
  }

  public LedgerStateSelector round(Long round) {
    this.round = JsonNullable.<Long>of(round);
    
    return this;
  }

  /**
   * If provided must be accompanied with &#x60;epoch&#x60;, the ledger state lower than or equal to the given epoch and round is returned.
   * minimum: 0
   * maximum: 10000000000
   * @return round
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Long getRound() {
        return round.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ROUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getRound_JsonNullable() {
    return round;
  }
  
  @JsonProperty(JSON_PROPERTY_ROUND)
  public void setRound_JsonNullable(JsonNullable<Long> round) {
    this.round = round;
  }

  public void setRound(Long round) {
    this.round = JsonNullable.<Long>of(round);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LedgerStateSelector ledgerStateSelector = (LedgerStateSelector) o;
    return equalsNullable(this.stateVersion, ledgerStateSelector.stateVersion) &&
        equalsNullable(this.timestamp, ledgerStateSelector.timestamp) &&
        equalsNullable(this.epoch, ledgerStateSelector.epoch) &&
        equalsNullable(this.round, ledgerStateSelector.round);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(stateVersion), hashCodeNullable(timestamp), hashCodeNullable(epoch), hashCodeNullable(round));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LedgerStateSelector {\n");
    sb.append("    stateVersion: ").append(toIndentedString(stateVersion)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    epoch: ").append(toIndentedString(epoch)).append("\n");
    sb.append("    round: ").append(toIndentedString(round)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `state_version` to the URL query string
    if (getStateVersion() != null) {
      try {
        joiner.add(String.format("%sstate_version%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStateVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `timestamp` to the URL query string
    if (getTimestamp() != null) {
      try {
        joiner.add(String.format("%stimestamp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTimestamp()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `epoch` to the URL query string
    if (getEpoch() != null) {
      try {
        joiner.add(String.format("%sepoch%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEpoch()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `round` to the URL query string
    if (getRound() != null) {
      try {
        joiner.add(String.format("%sround%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRound()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

