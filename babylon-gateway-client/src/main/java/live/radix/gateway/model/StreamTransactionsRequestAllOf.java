/*
 * Babylon Gateway API - RCnet V3
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers. For simple use cases, you can typically use the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs-babylon.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal. 
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.gateway.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import live.radix.gateway.model.LedgerStateSelector;
import live.radix.gateway.model.StreamTransactionsRequestEventFilterItem;
import live.radix.gateway.model.TransactionDetailsOptIns;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * StreamTransactionsRequestAllOf
 */
@JsonPropertyOrder({
  StreamTransactionsRequestAllOf.JSON_PROPERTY_FROM_LEDGER_STATE,
  StreamTransactionsRequestAllOf.JSON_PROPERTY_KIND_FILTER,
  StreamTransactionsRequestAllOf.JSON_PROPERTY_MANIFEST_ACCOUNTS_WITHDRAWN_FROM_FILTER,
  StreamTransactionsRequestAllOf.JSON_PROPERTY_MANIFEST_ACCOUNTS_DEPOSITED_INTO_FILTER,
  StreamTransactionsRequestAllOf.JSON_PROPERTY_MANIFEST_RESOURCES_FILTER,
  StreamTransactionsRequestAllOf.JSON_PROPERTY_AFFECTED_GLOBAL_ENTITIES_FILTER,
  StreamTransactionsRequestAllOf.JSON_PROPERTY_EVENTS_FILTER,
  StreamTransactionsRequestAllOf.JSON_PROPERTY_ORDER,
  StreamTransactionsRequestAllOf.JSON_PROPERTY_OPT_INS
})
@JsonTypeName("StreamTransactionsRequest_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-18T09:19:23.851991900+03:00[Europe/Kiev]")
public class StreamTransactionsRequestAllOf {
  public static final String JSON_PROPERTY_FROM_LEDGER_STATE = "from_ledger_state";
  private JsonNullable<LedgerStateSelector> fromLedgerState = JsonNullable.<LedgerStateSelector>undefined();

  /**
   * Limit returned transactions by their kind. Defaults to &#x60;user&#x60;.
   */
  public enum KindFilterEnum {
    USER("User"),
    
    EPOCHCHANGE("EpochChange"),
    
    ALL("All");

    private String value;

    KindFilterEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static KindFilterEnum fromValue(String value) {
      for (KindFilterEnum b : KindFilterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_KIND_FILTER = "kind_filter";
  private KindFilterEnum kindFilter;

  public static final String JSON_PROPERTY_MANIFEST_ACCOUNTS_WITHDRAWN_FROM_FILTER = "manifest_accounts_withdrawn_from_filter";
  private List<String> manifestAccountsWithdrawnFromFilter;

  public static final String JSON_PROPERTY_MANIFEST_ACCOUNTS_DEPOSITED_INTO_FILTER = "manifest_accounts_deposited_into_filter";
  private List<String> manifestAccountsDepositedIntoFilter;

  public static final String JSON_PROPERTY_MANIFEST_RESOURCES_FILTER = "manifest_resources_filter";
  private List<String> manifestResourcesFilter;

  public static final String JSON_PROPERTY_AFFECTED_GLOBAL_ENTITIES_FILTER = "affected_global_entities_filter";
  private List<String> affectedGlobalEntitiesFilter;

  public static final String JSON_PROPERTY_EVENTS_FILTER = "events_filter";
  private List<StreamTransactionsRequestEventFilterItem> eventsFilter;

  /**
   * Configures the order of returned result set. Defaults to &#x60;desc&#x60;.
   */
  public enum OrderEnum {
    ASC("Asc"),
    
    DESC("Desc");

    private String value;

    OrderEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OrderEnum fromValue(String value) {
      for (OrderEnum b : OrderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ORDER = "order";
  private OrderEnum order;

  public static final String JSON_PROPERTY_OPT_INS = "opt_ins";
  private TransactionDetailsOptIns optIns;

  public StreamTransactionsRequestAllOf() {
  }

  public StreamTransactionsRequestAllOf fromLedgerState(LedgerStateSelector fromLedgerState) {
    this.fromLedgerState = JsonNullable.<LedgerStateSelector>of(fromLedgerState);
    
    return this;
  }

   /**
   * Get fromLedgerState
   * @return fromLedgerState
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public LedgerStateSelector getFromLedgerState() {
        return fromLedgerState.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FROM_LEDGER_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<LedgerStateSelector> getFromLedgerState_JsonNullable() {
    return fromLedgerState;
  }
  
  @JsonProperty(JSON_PROPERTY_FROM_LEDGER_STATE)
  public void setFromLedgerState_JsonNullable(JsonNullable<LedgerStateSelector> fromLedgerState) {
    this.fromLedgerState = fromLedgerState;
  }

  public void setFromLedgerState(LedgerStateSelector fromLedgerState) {
    this.fromLedgerState = JsonNullable.<LedgerStateSelector>of(fromLedgerState);
  }


  public StreamTransactionsRequestAllOf kindFilter(KindFilterEnum kindFilter) {
    
    this.kindFilter = kindFilter;
    return this;
  }

   /**
   * Limit returned transactions by their kind. Defaults to &#x60;user&#x60;.
   * @return kindFilter
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KIND_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public KindFilterEnum getKindFilter() {
    return kindFilter;
  }


  @JsonProperty(JSON_PROPERTY_KIND_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKindFilter(KindFilterEnum kindFilter) {
    this.kindFilter = kindFilter;
  }


  public StreamTransactionsRequestAllOf manifestAccountsWithdrawnFromFilter(List<String> manifestAccountsWithdrawnFromFilter) {
    
    this.manifestAccountsWithdrawnFromFilter = manifestAccountsWithdrawnFromFilter;
    return this;
  }

  public StreamTransactionsRequestAllOf addManifestAccountsWithdrawnFromFilterItem(String manifestAccountsWithdrawnFromFilterItem) {
    if (this.manifestAccountsWithdrawnFromFilter == null) {
      this.manifestAccountsWithdrawnFromFilter = new ArrayList<>();
    }
    this.manifestAccountsWithdrawnFromFilter.add(manifestAccountsWithdrawnFromFilterItem);
    return this;
  }

   /**
   * Get manifestAccountsWithdrawnFromFilter
   * @return manifestAccountsWithdrawnFromFilter
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MANIFEST_ACCOUNTS_WITHDRAWN_FROM_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getManifestAccountsWithdrawnFromFilter() {
    return manifestAccountsWithdrawnFromFilter;
  }


  @JsonProperty(JSON_PROPERTY_MANIFEST_ACCOUNTS_WITHDRAWN_FROM_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManifestAccountsWithdrawnFromFilter(List<String> manifestAccountsWithdrawnFromFilter) {
    this.manifestAccountsWithdrawnFromFilter = manifestAccountsWithdrawnFromFilter;
  }


  public StreamTransactionsRequestAllOf manifestAccountsDepositedIntoFilter(List<String> manifestAccountsDepositedIntoFilter) {
    
    this.manifestAccountsDepositedIntoFilter = manifestAccountsDepositedIntoFilter;
    return this;
  }

  public StreamTransactionsRequestAllOf addManifestAccountsDepositedIntoFilterItem(String manifestAccountsDepositedIntoFilterItem) {
    if (this.manifestAccountsDepositedIntoFilter == null) {
      this.manifestAccountsDepositedIntoFilter = new ArrayList<>();
    }
    this.manifestAccountsDepositedIntoFilter.add(manifestAccountsDepositedIntoFilterItem);
    return this;
  }

   /**
   * Get manifestAccountsDepositedIntoFilter
   * @return manifestAccountsDepositedIntoFilter
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MANIFEST_ACCOUNTS_DEPOSITED_INTO_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getManifestAccountsDepositedIntoFilter() {
    return manifestAccountsDepositedIntoFilter;
  }


  @JsonProperty(JSON_PROPERTY_MANIFEST_ACCOUNTS_DEPOSITED_INTO_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManifestAccountsDepositedIntoFilter(List<String> manifestAccountsDepositedIntoFilter) {
    this.manifestAccountsDepositedIntoFilter = manifestAccountsDepositedIntoFilter;
  }


  public StreamTransactionsRequestAllOf manifestResourcesFilter(List<String> manifestResourcesFilter) {
    
    this.manifestResourcesFilter = manifestResourcesFilter;
    return this;
  }

  public StreamTransactionsRequestAllOf addManifestResourcesFilterItem(String manifestResourcesFilterItem) {
    if (this.manifestResourcesFilter == null) {
      this.manifestResourcesFilter = new ArrayList<>();
    }
    this.manifestResourcesFilter.add(manifestResourcesFilterItem);
    return this;
  }

   /**
   * Get manifestResourcesFilter
   * @return manifestResourcesFilter
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MANIFEST_RESOURCES_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getManifestResourcesFilter() {
    return manifestResourcesFilter;
  }


  @JsonProperty(JSON_PROPERTY_MANIFEST_RESOURCES_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManifestResourcesFilter(List<String> manifestResourcesFilter) {
    this.manifestResourcesFilter = manifestResourcesFilter;
  }


  public StreamTransactionsRequestAllOf affectedGlobalEntitiesFilter(List<String> affectedGlobalEntitiesFilter) {
    
    this.affectedGlobalEntitiesFilter = affectedGlobalEntitiesFilter;
    return this;
  }

  public StreamTransactionsRequestAllOf addAffectedGlobalEntitiesFilterItem(String affectedGlobalEntitiesFilterItem) {
    if (this.affectedGlobalEntitiesFilter == null) {
      this.affectedGlobalEntitiesFilter = new ArrayList<>();
    }
    this.affectedGlobalEntitiesFilter.add(affectedGlobalEntitiesFilterItem);
    return this;
  }

   /**
   * Get affectedGlobalEntitiesFilter
   * @return affectedGlobalEntitiesFilter
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AFFECTED_GLOBAL_ENTITIES_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAffectedGlobalEntitiesFilter() {
    return affectedGlobalEntitiesFilter;
  }


  @JsonProperty(JSON_PROPERTY_AFFECTED_GLOBAL_ENTITIES_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAffectedGlobalEntitiesFilter(List<String> affectedGlobalEntitiesFilter) {
    this.affectedGlobalEntitiesFilter = affectedGlobalEntitiesFilter;
  }


  public StreamTransactionsRequestAllOf eventsFilter(List<StreamTransactionsRequestEventFilterItem> eventsFilter) {
    
    this.eventsFilter = eventsFilter;
    return this;
  }

  public StreamTransactionsRequestAllOf addEventsFilterItem(StreamTransactionsRequestEventFilterItem eventsFilterItem) {
    if (this.eventsFilter == null) {
      this.eventsFilter = new ArrayList<>();
    }
    this.eventsFilter.add(eventsFilterItem);
    return this;
  }

   /**
   * Get eventsFilter
   * @return eventsFilter
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EVENTS_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<StreamTransactionsRequestEventFilterItem> getEventsFilter() {
    return eventsFilter;
  }


  @JsonProperty(JSON_PROPERTY_EVENTS_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventsFilter(List<StreamTransactionsRequestEventFilterItem> eventsFilter) {
    this.eventsFilter = eventsFilter;
  }


  public StreamTransactionsRequestAllOf order(OrderEnum order) {
    
    this.order = order;
    return this;
  }

   /**
   * Configures the order of returned result set. Defaults to &#x60;desc&#x60;.
   * @return order
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OrderEnum getOrder() {
    return order;
  }


  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrder(OrderEnum order) {
    this.order = order;
  }


  public StreamTransactionsRequestAllOf optIns(TransactionDetailsOptIns optIns) {
    
    this.optIns = optIns;
    return this;
  }

   /**
   * Get optIns
   * @return optIns
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPT_INS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TransactionDetailsOptIns getOptIns() {
    return optIns;
  }


  @JsonProperty(JSON_PROPERTY_OPT_INS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptIns(TransactionDetailsOptIns optIns) {
    this.optIns = optIns;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamTransactionsRequestAllOf streamTransactionsRequestAllOf = (StreamTransactionsRequestAllOf) o;
    return equalsNullable(this.fromLedgerState, streamTransactionsRequestAllOf.fromLedgerState) &&
        Objects.equals(this.kindFilter, streamTransactionsRequestAllOf.kindFilter) &&
        Objects.equals(this.manifestAccountsWithdrawnFromFilter, streamTransactionsRequestAllOf.manifestAccountsWithdrawnFromFilter) &&
        Objects.equals(this.manifestAccountsDepositedIntoFilter, streamTransactionsRequestAllOf.manifestAccountsDepositedIntoFilter) &&
        Objects.equals(this.manifestResourcesFilter, streamTransactionsRequestAllOf.manifestResourcesFilter) &&
        Objects.equals(this.affectedGlobalEntitiesFilter, streamTransactionsRequestAllOf.affectedGlobalEntitiesFilter) &&
        Objects.equals(this.eventsFilter, streamTransactionsRequestAllOf.eventsFilter) &&
        Objects.equals(this.order, streamTransactionsRequestAllOf.order) &&
        Objects.equals(this.optIns, streamTransactionsRequestAllOf.optIns);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(fromLedgerState), kindFilter, manifestAccountsWithdrawnFromFilter, manifestAccountsDepositedIntoFilter, manifestResourcesFilter, affectedGlobalEntitiesFilter, eventsFilter, order, optIns);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamTransactionsRequestAllOf {\n");
    sb.append("    fromLedgerState: ").append(toIndentedString(fromLedgerState)).append("\n");
    sb.append("    kindFilter: ").append(toIndentedString(kindFilter)).append("\n");
    sb.append("    manifestAccountsWithdrawnFromFilter: ").append(toIndentedString(manifestAccountsWithdrawnFromFilter)).append("\n");
    sb.append("    manifestAccountsDepositedIntoFilter: ").append(toIndentedString(manifestAccountsDepositedIntoFilter)).append("\n");
    sb.append("    manifestResourcesFilter: ").append(toIndentedString(manifestResourcesFilter)).append("\n");
    sb.append("    affectedGlobalEntitiesFilter: ").append(toIndentedString(affectedGlobalEntitiesFilter)).append("\n");
    sb.append("    eventsFilter: ").append(toIndentedString(eventsFilter)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    optIns: ").append(toIndentedString(optIns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `from_ledger_state` to the URL query string
    if (getFromLedgerState() != null) {
      joiner.add(getFromLedgerState().toUrlQueryString(prefix + "from_ledger_state" + suffix));
    }

    // add `kind_filter` to the URL query string
    if (getKindFilter() != null) {
      try {
        joiner.add(String.format("%skind_filter%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getKindFilter()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `manifest_accounts_withdrawn_from_filter` to the URL query string
    if (getManifestAccountsWithdrawnFromFilter() != null) {
      for (int i = 0; i < getManifestAccountsWithdrawnFromFilter().size(); i++) {
        try {
          joiner.add(String.format("%smanifest_accounts_withdrawn_from_filter%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getManifestAccountsWithdrawnFromFilter().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `manifest_accounts_deposited_into_filter` to the URL query string
    if (getManifestAccountsDepositedIntoFilter() != null) {
      for (int i = 0; i < getManifestAccountsDepositedIntoFilter().size(); i++) {
        try {
          joiner.add(String.format("%smanifest_accounts_deposited_into_filter%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getManifestAccountsDepositedIntoFilter().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `manifest_resources_filter` to the URL query string
    if (getManifestResourcesFilter() != null) {
      for (int i = 0; i < getManifestResourcesFilter().size(); i++) {
        try {
          joiner.add(String.format("%smanifest_resources_filter%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getManifestResourcesFilter().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `affected_global_entities_filter` to the URL query string
    if (getAffectedGlobalEntitiesFilter() != null) {
      for (int i = 0; i < getAffectedGlobalEntitiesFilter().size(); i++) {
        try {
          joiner.add(String.format("%saffected_global_entities_filter%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getAffectedGlobalEntitiesFilter().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `events_filter` to the URL query string
    if (getEventsFilter() != null) {
      for (int i = 0; i < getEventsFilter().size(); i++) {
        if (getEventsFilter().get(i) != null) {
          joiner.add(getEventsFilter().get(i).toUrlQueryString(String.format("%sevents_filter%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `order` to the URL query string
    if (getOrder() != null) {
      try {
        joiner.add(String.format("%sorder%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOrder()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `opt_ins` to the URL query string
    if (getOptIns() != null) {
      joiner.add(getOptIns().toUrlQueryString(prefix + "opt_ins" + suffix));
    }

    return joiner.toString();
  }

}

