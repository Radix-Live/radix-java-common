/*
 * Babylon Gateway API - RCnet V3
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers. For simple use cases, you can typically use the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs-babylon.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal. 
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.gateway.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * TransactionPreviewRequestFlags
 */
@JsonPropertyOrder({
  TransactionPreviewRequestFlags.JSON_PROPERTY_USE_FREE_CREDIT,
  TransactionPreviewRequestFlags.JSON_PROPERTY_ASSUME_ALL_SIGNATURE_PROOFS,
  TransactionPreviewRequestFlags.JSON_PROPERTY_SKIP_EPOCH_CHECK
})
@JsonTypeName("TransactionPreviewRequest_flags")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-18T09:19:23.851991900+03:00[Europe/Kiev]")
public class TransactionPreviewRequestFlags {
  public static final String JSON_PROPERTY_USE_FREE_CREDIT = "use_free_credit";
  private Boolean useFreeCredit;

  public static final String JSON_PROPERTY_ASSUME_ALL_SIGNATURE_PROOFS = "assume_all_signature_proofs";
  private Boolean assumeAllSignatureProofs;

  public static final String JSON_PROPERTY_SKIP_EPOCH_CHECK = "skip_epoch_check";
  private Boolean skipEpochCheck;

  public TransactionPreviewRequestFlags() {
  }

  public TransactionPreviewRequestFlags useFreeCredit(Boolean useFreeCredit) {
    
    this.useFreeCredit = useFreeCredit;
    return this;
  }

   /**
   * Get useFreeCredit
   * @return useFreeCredit
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USE_FREE_CREDIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean isUseFreeCredit() {
    return useFreeCredit;
  }


  @JsonProperty(JSON_PROPERTY_USE_FREE_CREDIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUseFreeCredit(Boolean useFreeCredit) {
    this.useFreeCredit = useFreeCredit;
  }


  public TransactionPreviewRequestFlags assumeAllSignatureProofs(Boolean assumeAllSignatureProofs) {
    
    this.assumeAllSignatureProofs = assumeAllSignatureProofs;
    return this;
  }

   /**
   * Get assumeAllSignatureProofs
   * @return assumeAllSignatureProofs
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ASSUME_ALL_SIGNATURE_PROOFS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean isAssumeAllSignatureProofs() {
    return assumeAllSignatureProofs;
  }


  @JsonProperty(JSON_PROPERTY_ASSUME_ALL_SIGNATURE_PROOFS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAssumeAllSignatureProofs(Boolean assumeAllSignatureProofs) {
    this.assumeAllSignatureProofs = assumeAllSignatureProofs;
  }


  public TransactionPreviewRequestFlags skipEpochCheck(Boolean skipEpochCheck) {
    
    this.skipEpochCheck = skipEpochCheck;
    return this;
  }

   /**
   * Get skipEpochCheck
   * @return skipEpochCheck
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SKIP_EPOCH_CHECK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean isSkipEpochCheck() {
    return skipEpochCheck;
  }


  @JsonProperty(JSON_PROPERTY_SKIP_EPOCH_CHECK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSkipEpochCheck(Boolean skipEpochCheck) {
    this.skipEpochCheck = skipEpochCheck;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionPreviewRequestFlags transactionPreviewRequestFlags = (TransactionPreviewRequestFlags) o;
    return Objects.equals(this.useFreeCredit, transactionPreviewRequestFlags.useFreeCredit) &&
        Objects.equals(this.assumeAllSignatureProofs, transactionPreviewRequestFlags.assumeAllSignatureProofs) &&
        Objects.equals(this.skipEpochCheck, transactionPreviewRequestFlags.skipEpochCheck);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useFreeCredit, assumeAllSignatureProofs, skipEpochCheck);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionPreviewRequestFlags {\n");
    sb.append("    useFreeCredit: ").append(toIndentedString(useFreeCredit)).append("\n");
    sb.append("    assumeAllSignatureProofs: ").append(toIndentedString(assumeAllSignatureProofs)).append("\n");
    sb.append("    skipEpochCheck: ").append(toIndentedString(skipEpochCheck)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `use_free_credit` to the URL query string
    if (isUseFreeCredit() != null) {
      try {
        joiner.add(String.format("%suse_free_credit%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(isUseFreeCredit()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `assume_all_signature_proofs` to the URL query string
    if (isAssumeAllSignatureProofs() != null) {
      try {
        joiner.add(String.format("%sassume_all_signature_proofs%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(isAssumeAllSignatureProofs()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `skip_epoch_check` to the URL query string
    if (isSkipEpochCheck() != null) {
      try {
        joiner.add(String.format("%sskip_epoch_check%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(isSkipEpochCheck()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

