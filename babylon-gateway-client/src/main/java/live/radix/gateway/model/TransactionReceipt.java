/*
 * Babylon Gateway API - RCnet V3
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers. For simple use cases, you can typically use the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs-babylon.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal. 
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.gateway.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * TransactionReceipt
 */
@JsonPropertyOrder({
  TransactionReceipt.JSON_PROPERTY_STATUS,
  TransactionReceipt.JSON_PROPERTY_FEE_SUMMARY,
  TransactionReceipt.JSON_PROPERTY_COSTING_PARAMETERS,
  TransactionReceipt.JSON_PROPERTY_FEE_DESTINATION,
  TransactionReceipt.JSON_PROPERTY_FEE_SOURCE,
  TransactionReceipt.JSON_PROPERTY_STATE_UPDATES,
  TransactionReceipt.JSON_PROPERTY_NEXT_EPOCH,
  TransactionReceipt.JSON_PROPERTY_OUTPUT,
  TransactionReceipt.JSON_PROPERTY_EVENTS,
  TransactionReceipt.JSON_PROPERTY_ERROR_MESSAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-18T09:19:23.851991900+03:00[Europe/Kiev]")
public class TransactionReceipt {
  public static final String JSON_PROPERTY_STATUS = "status";
  private Object status;

  public static final String JSON_PROPERTY_FEE_SUMMARY = "fee_summary";
  private Object feeSummary;

  public static final String JSON_PROPERTY_COSTING_PARAMETERS = "costing_parameters";
  private Object costingParameters;

  public static final String JSON_PROPERTY_FEE_DESTINATION = "fee_destination";
  private Object feeDestination;

  public static final String JSON_PROPERTY_FEE_SOURCE = "fee_source";
  private Object feeSource;

  public static final String JSON_PROPERTY_STATE_UPDATES = "state_updates";
  private Object stateUpdates;

  public static final String JSON_PROPERTY_NEXT_EPOCH = "next_epoch";
  private Object nextEpoch;

  public static final String JSON_PROPERTY_OUTPUT = "output";
  private Object output;

  public static final String JSON_PROPERTY_EVENTS = "events";
  private Object events;

  public static final String JSON_PROPERTY_ERROR_MESSAGE = "error_message";
  private JsonNullable<String> errorMessage = JsonNullable.<String>undefined();

  public TransactionReceipt() {
  }

  public TransactionReceipt status(Object status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the transaction.
   * @return status
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(Object status) {
    this.status = status;
  }


  public TransactionReceipt feeSummary(Object feeSummary) {
    
    this.feeSummary = feeSummary;
    return this;
  }

   /**
   * Fees paid, Only present if the &#x60;status&#x60; is not &#x60;Rejected&#x60;.
   * @return feeSummary
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEE_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getFeeSummary() {
    return feeSummary;
  }


  @JsonProperty(JSON_PROPERTY_FEE_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeeSummary(Object feeSummary) {
    this.feeSummary = feeSummary;
  }


  public TransactionReceipt costingParameters(Object costingParameters) {
    
    this.costingParameters = costingParameters;
    return this;
  }

   /**
   * Get costingParameters
   * @return costingParameters
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COSTING_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getCostingParameters() {
    return costingParameters;
  }


  @JsonProperty(JSON_PROPERTY_COSTING_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCostingParameters(Object costingParameters) {
    this.costingParameters = costingParameters;
  }


  public TransactionReceipt feeDestination(Object feeDestination) {
    
    this.feeDestination = feeDestination;
    return this;
  }

   /**
   * Only present if the &#x60;status&#x60; is not &#x60;Rejected&#x60;.
   * @return feeDestination
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEE_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getFeeDestination() {
    return feeDestination;
  }


  @JsonProperty(JSON_PROPERTY_FEE_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeeDestination(Object feeDestination) {
    this.feeDestination = feeDestination;
  }


  public TransactionReceipt feeSource(Object feeSource) {
    
    this.feeSource = feeSource;
    return this;
  }

   /**
   * Only present if the &#x60;status&#x60; is not &#x60;Rejected&#x60;.
   * @return feeSource
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEE_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getFeeSource() {
    return feeSource;
  }


  @JsonProperty(JSON_PROPERTY_FEE_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeeSource(Object feeSource) {
    this.feeSource = feeSource;
  }


  public TransactionReceipt stateUpdates(Object stateUpdates) {
    
    this.stateUpdates = stateUpdates;
    return this;
  }

   /**
   * Transaction state updates (only present if status is Succeeded or Failed).
   * @return stateUpdates
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE_UPDATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getStateUpdates() {
    return stateUpdates;
  }


  @JsonProperty(JSON_PROPERTY_STATE_UPDATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStateUpdates(Object stateUpdates) {
    this.stateUpdates = stateUpdates;
  }


  public TransactionReceipt nextEpoch(Object nextEpoch) {
    
    this.nextEpoch = nextEpoch;
    return this;
  }

   /**
   * Information (number and active validator list) about new epoch if occured.
   * @return nextEpoch
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEXT_EPOCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getNextEpoch() {
    return nextEpoch;
  }


  @JsonProperty(JSON_PROPERTY_NEXT_EPOCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNextEpoch(Object nextEpoch) {
    this.nextEpoch = nextEpoch;
  }


  public TransactionReceipt output(Object output) {
    
    this.output = output;
    return this;
  }

   /**
   * The manifest line-by-line engine return data (only present if &#x60;status&#x60; is &#x60;Succeeded&#x60;).
   * @return output
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getOutput() {
    return output;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutput(Object output) {
    this.output = output;
  }


  public TransactionReceipt events(Object events) {
    
    this.events = events;
    return this;
  }

   /**
   * Events emitted by a transaction.
   * @return events
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EVENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getEvents() {
    return events;
  }


  @JsonProperty(JSON_PROPERTY_EVENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEvents(Object events) {
    this.events = events;
  }


  public TransactionReceipt errorMessage(String errorMessage) {
    this.errorMessage = JsonNullable.<String>of(errorMessage);
    
    return this;
  }

   /**
   * Error message (only present if status is &#x60;Failed&#x60; or &#x60;Rejected&#x60;)
   * @return errorMessage
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getErrorMessage() {
        return errorMessage.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getErrorMessage_JsonNullable() {
    return errorMessage;
  }
  
  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  public void setErrorMessage_JsonNullable(JsonNullable<String> errorMessage) {
    this.errorMessage = errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = JsonNullable.<String>of(errorMessage);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionReceipt transactionReceipt = (TransactionReceipt) o;
    return Objects.equals(this.status, transactionReceipt.status) &&
        Objects.equals(this.feeSummary, transactionReceipt.feeSummary) &&
        Objects.equals(this.costingParameters, transactionReceipt.costingParameters) &&
        Objects.equals(this.feeDestination, transactionReceipt.feeDestination) &&
        Objects.equals(this.feeSource, transactionReceipt.feeSource) &&
        Objects.equals(this.stateUpdates, transactionReceipt.stateUpdates) &&
        Objects.equals(this.nextEpoch, transactionReceipt.nextEpoch) &&
        Objects.equals(this.output, transactionReceipt.output) &&
        Objects.equals(this.events, transactionReceipt.events) &&
        equalsNullable(this.errorMessage, transactionReceipt.errorMessage);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, feeSummary, costingParameters, feeDestination, feeSource, stateUpdates, nextEpoch, output, events, hashCodeNullable(errorMessage));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionReceipt {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    feeSummary: ").append(toIndentedString(feeSummary)).append("\n");
    sb.append("    costingParameters: ").append(toIndentedString(costingParameters)).append("\n");
    sb.append("    feeDestination: ").append(toIndentedString(feeDestination)).append("\n");
    sb.append("    feeSource: ").append(toIndentedString(feeSource)).append("\n");
    sb.append("    stateUpdates: ").append(toIndentedString(stateUpdates)).append("\n");
    sb.append("    nextEpoch: ").append(toIndentedString(nextEpoch)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `status` to the URL query string
    if (getStatus() != null) {
      try {
        joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `fee_summary` to the URL query string
    if (getFeeSummary() != null) {
      try {
        joiner.add(String.format("%sfee_summary%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFeeSummary()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `costing_parameters` to the URL query string
    if (getCostingParameters() != null) {
      try {
        joiner.add(String.format("%scosting_parameters%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCostingParameters()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `fee_destination` to the URL query string
    if (getFeeDestination() != null) {
      try {
        joiner.add(String.format("%sfee_destination%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFeeDestination()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `fee_source` to the URL query string
    if (getFeeSource() != null) {
      try {
        joiner.add(String.format("%sfee_source%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFeeSource()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `state_updates` to the URL query string
    if (getStateUpdates() != null) {
      try {
        joiner.add(String.format("%sstate_updates%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStateUpdates()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `next_epoch` to the URL query string
    if (getNextEpoch() != null) {
      try {
        joiner.add(String.format("%snext_epoch%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNextEpoch()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `output` to the URL query string
    if (getOutput() != null) {
      try {
        joiner.add(String.format("%soutput%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutput()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `events` to the URL query string
    if (getEvents() != null) {
      try {
        joiner.add(String.format("%sevents%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEvents()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `error_message` to the URL query string
    if (getErrorMessage() != null) {
      try {
        joiner.add(String.format("%serror_message%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getErrorMessage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

