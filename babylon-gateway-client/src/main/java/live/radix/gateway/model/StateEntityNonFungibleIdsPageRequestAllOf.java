/*
 * Babylon Gateway API - RCnet V3
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers. For simple use cases, you can typically use the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs-babylon.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal. 
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.gateway.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * StateEntityNonFungibleIdsPageRequestAllOf
 */
@JsonPropertyOrder({
  StateEntityNonFungibleIdsPageRequestAllOf.JSON_PROPERTY_ADDRESS,
  StateEntityNonFungibleIdsPageRequestAllOf.JSON_PROPERTY_VAULT_ADDRESS,
  StateEntityNonFungibleIdsPageRequestAllOf.JSON_PROPERTY_RESOURCE_ADDRESS
})
@JsonTypeName("StateEntityNonFungibleIdsPageRequest_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-18T09:19:23.851991900+03:00[Europe/Kiev]")
public class StateEntityNonFungibleIdsPageRequestAllOf {
  public static final String JSON_PROPERTY_ADDRESS = "address";
  private String address;

  public static final String JSON_PROPERTY_VAULT_ADDRESS = "vault_address";
  private String vaultAddress;

  public static final String JSON_PROPERTY_RESOURCE_ADDRESS = "resource_address";
  private String resourceAddress;

  public StateEntityNonFungibleIdsPageRequestAllOf() {
  }

  public StateEntityNonFungibleIdsPageRequestAllOf address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Bech32m-encoded human readable version of the address.
   * @return address
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAddress() {
    return address;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAddress(String address) {
    this.address = address;
  }


  public StateEntityNonFungibleIdsPageRequestAllOf vaultAddress(String vaultAddress) {
    
    this.vaultAddress = vaultAddress;
    return this;
  }

   /**
   * Bech32m-encoded human readable version of the address.
   * @return vaultAddress
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VAULT_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVaultAddress() {
    return vaultAddress;
  }


  @JsonProperty(JSON_PROPERTY_VAULT_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVaultAddress(String vaultAddress) {
    this.vaultAddress = vaultAddress;
  }


  public StateEntityNonFungibleIdsPageRequestAllOf resourceAddress(String resourceAddress) {
    
    this.resourceAddress = resourceAddress;
    return this;
  }

   /**
   * Bech32m-encoded human readable version of the address.
   * @return resourceAddress
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESOURCE_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getResourceAddress() {
    return resourceAddress;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResourceAddress(String resourceAddress) {
    this.resourceAddress = resourceAddress;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StateEntityNonFungibleIdsPageRequestAllOf stateEntityNonFungibleIdsPageRequestAllOf = (StateEntityNonFungibleIdsPageRequestAllOf) o;
    return Objects.equals(this.address, stateEntityNonFungibleIdsPageRequestAllOf.address) &&
        Objects.equals(this.vaultAddress, stateEntityNonFungibleIdsPageRequestAllOf.vaultAddress) &&
        Objects.equals(this.resourceAddress, stateEntityNonFungibleIdsPageRequestAllOf.resourceAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, vaultAddress, resourceAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StateEntityNonFungibleIdsPageRequestAllOf {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    vaultAddress: ").append(toIndentedString(vaultAddress)).append("\n");
    sb.append("    resourceAddress: ").append(toIndentedString(resourceAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `address` to the URL query string
    if (getAddress() != null) {
      try {
        joiner.add(String.format("%saddress%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAddress()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `vault_address` to the URL query string
    if (getVaultAddress() != null) {
      try {
        joiner.add(String.format("%svault_address%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVaultAddress()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `resource_address` to the URL query string
    if (getResourceAddress() != null) {
      try {
        joiner.add(String.format("%sresource_address%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResourceAddress()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

