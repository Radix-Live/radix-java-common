/*
 * Radix Core API - Babylon
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.core.client;

import live.radix.core.ApiException;
import live.radix.core.model.BasicErrorResponse;
import live.radix.core.model.LtsStateAccountAllFungibleResourceBalancesRequest;
import live.radix.core.model.LtsStateAccountAllFungibleResourceBalancesResponse;
import live.radix.core.model.LtsStateAccountDepositBehaviourRequest;
import live.radix.core.model.LtsStateAccountDepositBehaviourResponse;
import live.radix.core.model.LtsStateAccountFungibleResourceBalanceRequest;
import live.radix.core.model.LtsStateAccountFungibleResourceBalanceResponse;
import live.radix.core.model.LtsStreamAccountTransactionOutcomesRequest;
import live.radix.core.model.LtsStreamAccountTransactionOutcomesResponse;
import live.radix.core.model.LtsStreamTransactionOutcomesRequest;
import live.radix.core.model.LtsStreamTransactionOutcomesResponse;
import live.radix.core.model.LtsTransactionConstructionRequest;
import live.radix.core.model.LtsTransactionConstructionResponse;
import live.radix.core.model.LtsTransactionStatusRequest;
import live.radix.core.model.LtsTransactionStatusResponse;
import live.radix.core.model.LtsTransactionSubmitRequest;
import live.radix.core.model.LtsTransactionSubmitResponse;
import live.radix.core.model.TransactionSubmitErrorResponse;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LtsApi
 */
@Ignore
public class LtsApiTest {

    private final LtsApi api = new LtsApi();

    /**
     * Get All Account Balances
     *
     * Returns balances for all resources associated with an account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ltsStateAccountAllFungibleResourceBalancesPostTest() throws ApiException {
        LtsStateAccountAllFungibleResourceBalancesRequest ltsStateAccountAllFungibleResourceBalancesRequest = null;
        LtsStateAccountAllFungibleResourceBalancesResponse response = api.ltsStateAccountAllFungibleResourceBalancesPost(ltsStateAccountAllFungibleResourceBalancesRequest);

        // TODO: test validations
    }
    /**
     * Get Account Deposit Behaviour
     *
     * Returns deposit behaviour of a single account for multiple resource addresses
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ltsStateAccountDepositBehaviourPostTest() throws ApiException {
        LtsStateAccountDepositBehaviourRequest ltsStateAccountDepositBehaviourRequest = null;
        LtsStateAccountDepositBehaviourResponse response = api.ltsStateAccountDepositBehaviourPost(ltsStateAccountDepositBehaviourRequest);

        // TODO: test validations
    }
    /**
     * Get Single Account Balance
     *
     * Returns balance of a single fungible resource in an account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ltsStateAccountFungibleResourceBalancePostTest() throws ApiException {
        LtsStateAccountFungibleResourceBalanceRequest ltsStateAccountFungibleResourceBalanceRequest = null;
        LtsStateAccountFungibleResourceBalanceResponse response = api.ltsStateAccountFungibleResourceBalancePost(ltsStateAccountFungibleResourceBalanceRequest);

        // TODO: test validations
    }
    /**
     * Get Account Transaction Outcomes
     *
     * Returns a list of committed transaction outcomes (containing balance changes) from a given state version, filtered to only transactions which involved the given account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ltsStreamAccountTransactionOutcomesPostTest() throws ApiException {
        LtsStreamAccountTransactionOutcomesRequest ltsStreamAccountTransactionOutcomesRequest = null;
        LtsStreamAccountTransactionOutcomesResponse response = api.ltsStreamAccountTransactionOutcomesPost(ltsStreamAccountTransactionOutcomesRequest);

        // TODO: test validations
    }
    /**
     * Get Transaction Outcomes
     *
     * Returns a list of committed transaction outcomes (containing balance changes) from a given state version. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ltsStreamTransactionOutcomesPostTest() throws ApiException {
        LtsStreamTransactionOutcomesRequest ltsStreamTransactionOutcomesRequest = null;
        LtsStreamTransactionOutcomesResponse response = api.ltsStreamTransactionOutcomesPost(ltsStreamTransactionOutcomesRequest);

        // TODO: test validations
    }
    /**
     * Get Construction Metadata
     *
     * Returns information necessary to build a transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ltsTransactionConstructionPostTest() throws ApiException {
        LtsTransactionConstructionRequest ltsTransactionConstructionRequest = null;
        LtsTransactionConstructionResponse response = api.ltsTransactionConstructionPost(ltsTransactionConstructionRequest);

        // TODO: test validations
    }
    /**
     * Get Transaction Status
     *
     * Shares the node&#39;s knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it&#39;s theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ltsTransactionStatusPostTest() throws ApiException {
        LtsTransactionStatusRequest ltsTransactionStatusRequest = null;
        LtsTransactionStatusResponse response = api.ltsTransactionStatusPost(ltsTransactionStatusRequest);

        // TODO: test validations
    }
    /**
     * Submit Transaction
     *
     * Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node&#39;s mempool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ltsTransactionSubmitPostTest() throws ApiException {
        LtsTransactionSubmitRequest ltsTransactionSubmitRequest = null;
        LtsTransactionSubmitResponse response = api.ltsTransactionSubmitPost(ltsTransactionSubmitRequest);

        // TODO: test validations
    }
}
