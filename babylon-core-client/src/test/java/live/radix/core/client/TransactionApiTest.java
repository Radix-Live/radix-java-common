/*
 * Radix Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.core.client;

import live.radix.core.ApiException;
import live.radix.core.model.BasicErrorResponse;
import live.radix.core.model.TransactionCallPreviewRequest;
import live.radix.core.model.TransactionCallPreviewResponse;
import live.radix.core.model.TransactionParseRequest;
import live.radix.core.model.TransactionParseResponse;
import live.radix.core.model.TransactionPreviewRequest;
import live.radix.core.model.TransactionPreviewResponse;
import live.radix.core.model.TransactionPreviewV2ErrorResponse;
import live.radix.core.model.TransactionPreviewV2Request;
import live.radix.core.model.TransactionPreviewV2Response;
import live.radix.core.model.TransactionReceiptRequest;
import live.radix.core.model.TransactionReceiptResponse;
import live.radix.core.model.TransactionStatusRequest;
import live.radix.core.model.TransactionStatusResponse;
import live.radix.core.model.TransactionSubmitErrorResponse;
import live.radix.core.model.TransactionSubmitRequest;
import live.radix.core.model.TransactionSubmitResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionApi
 */
@Disabled
public class TransactionApiTest {

    private final TransactionApi api = new TransactionApi();

    /**
     * Scrypto Call Preview
     *
     * Preview a scrypto function or method call against the latest network state. Returns the result of the scrypto function or method call. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionCallPreviewPostTest() throws ApiException {
        TransactionCallPreviewRequest transactionCallPreviewRequest = null;
        TransactionCallPreviewResponse response = api.transactionCallPreviewPost(transactionCallPreviewRequest);

        // TODO: test validations
    }
    /**
     * Parse Transaction Payload
     *
     * Extracts the contents and hashes of various types of transaction payloads, or sub-payloads.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionParsePostTest() throws ApiException {
        TransactionParseRequest transactionParseRequest = null;
        TransactionParseResponse response = api.transactionParsePost(transactionParseRequest);

        // TODO: test validations
    }
    /**
     * Transaction Preview V1
     *
     * Preview a transaction against the latest network state, and returns the preview receipt. If the node has enabled it, you may be able to also preview against recent network state.  For V2 transactions (and beyond) the &#x60;/preview-v2&#x60; endpoint should be used instead. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionPreviewPostTest() throws ApiException {
        TransactionPreviewRequest transactionPreviewRequest = null;
        TransactionPreviewResponse response = api.transactionPreviewPost(transactionPreviewRequest);

        // TODO: test validations
    }
    /**
     * Transaction Preview V2
     *
     * Previews a transaction against the latest network state, and returns the preview receipt. If the node has enabled it, you may be able to also preview against recent network state.  This endpoint supports V2 transactions (and beyond). If you still need to preview V1 transactions, you should use the &#x60;/preview&#x60; endpoint instead. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionPreviewV2PostTest() throws ApiException {
        TransactionPreviewV2Request transactionPreviewV2Request = null;
        TransactionPreviewV2Response response = api.transactionPreviewV2Post(transactionPreviewV2Request);

        // TODO: test validations
    }
    /**
     * Get Transaction Receipt
     *
     * Gets the transaction receipt for a committed transaction. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionReceiptPostTest() throws ApiException {
        TransactionReceiptRequest transactionReceiptRequest = null;
        TransactionReceiptResponse response = api.transactionReceiptPost(transactionReceiptRequest);

        // TODO: test validations
    }
    /**
     * Get Transaction Status
     *
     * Shares the node&#39;s knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it&#39;s theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionStatusPostTest() throws ApiException {
        TransactionStatusRequest transactionStatusRequest = null;
        TransactionStatusResponse response = api.transactionStatusPost(transactionStatusRequest);

        // TODO: test validations
    }
    /**
     * Transaction Submit
     *
     * Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node&#39;s mempool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionSubmitPostTest() throws ApiException {
        TransactionSubmitRequest transactionSubmitRequest = null;
        TransactionSubmitResponse response = api.transactionSubmitPost(transactionSubmitRequest);

        // TODO: test validations
    }
}
