/*
 * Radix Core API - Babylon
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.core.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import live.radix.core.model.LtsTransactionIntentStatus;
import live.radix.core.model.LtsTransactionPayloadDetails;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * LtsTransactionStatusResponse
 */
@JsonPropertyOrder({
  LtsTransactionStatusResponse.JSON_PROPERTY_INTENT_STATUS,
  LtsTransactionStatusResponse.JSON_PROPERTY_STATUS_DESCRIPTION,
  LtsTransactionStatusResponse.JSON_PROPERTY_COMMITTED_STATE_VERSION,
  LtsTransactionStatusResponse.JSON_PROPERTY_INVALID_FROM_EPOCH,
  LtsTransactionStatusResponse.JSON_PROPERTY_KNOWN_PAYLOADS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-06T18:51:31.842802500+02:00[Europe/Kiev]")
public class LtsTransactionStatusResponse {
  public static final String JSON_PROPERTY_INTENT_STATUS = "intent_status";
  private LtsTransactionIntentStatus intentStatus;

  public static final String JSON_PROPERTY_STATUS_DESCRIPTION = "status_description";
  private String statusDescription;

  public static final String JSON_PROPERTY_COMMITTED_STATE_VERSION = "committed_state_version";
  private Long committedStateVersion;

  public static final String JSON_PROPERTY_INVALID_FROM_EPOCH = "invalid_from_epoch";
  private Long invalidFromEpoch;

  public static final String JSON_PROPERTY_KNOWN_PAYLOADS = "known_payloads";
  private List<LtsTransactionPayloadDetails> knownPayloads = new ArrayList<>();

  public LtsTransactionStatusResponse() {
  }

  public LtsTransactionStatusResponse intentStatus(LtsTransactionIntentStatus intentStatus) {
    
    this.intentStatus = intentStatus;
    return this;
  }

   /**
   * Get intentStatus
   * @return intentStatus
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INTENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LtsTransactionIntentStatus getIntentStatus() {
    return intentStatus;
  }


  @JsonProperty(JSON_PROPERTY_INTENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIntentStatus(LtsTransactionIntentStatus intentStatus) {
    this.intentStatus = intentStatus;
  }


  public LtsTransactionStatusResponse statusDescription(String statusDescription) {
    
    this.statusDescription = statusDescription;
    return this;
  }

   /**
   * An explanation as to why the intent status is resolved as it is. 
   * @return statusDescription
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStatusDescription() {
    return statusDescription;
  }


  @JsonProperty(JSON_PROPERTY_STATUS_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
  }


  public LtsTransactionStatusResponse committedStateVersion(Long committedStateVersion) {
    
    this.committedStateVersion = committedStateVersion;
    return this;
  }

   /**
   * Get committedStateVersion
   * minimum: 1
   * maximum: 100000000000000
   * @return committedStateVersion
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMITTED_STATE_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCommittedStateVersion() {
    return committedStateVersion;
  }


  @JsonProperty(JSON_PROPERTY_COMMITTED_STATE_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommittedStateVersion(Long committedStateVersion) {
    this.committedStateVersion = committedStateVersion;
  }


  public LtsTransactionStatusResponse invalidFromEpoch(Long invalidFromEpoch) {
    
    this.invalidFromEpoch = invalidFromEpoch;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;10^10&#x60;, marking the epoch from which the transaction will no longer be valid, and be permanently rejected. Only present if the intent status is InMempool or Unknown and we know about a payload. 
   * minimum: 0
   * maximum: 10000000000
   * @return invalidFromEpoch
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVALID_FROM_EPOCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getInvalidFromEpoch() {
    return invalidFromEpoch;
  }


  @JsonProperty(JSON_PROPERTY_INVALID_FROM_EPOCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvalidFromEpoch(Long invalidFromEpoch) {
    this.invalidFromEpoch = invalidFromEpoch;
  }


  public LtsTransactionStatusResponse knownPayloads(List<LtsTransactionPayloadDetails> knownPayloads) {
    
    this.knownPayloads = knownPayloads;
    return this;
  }

  public LtsTransactionStatusResponse addKnownPayloadsItem(LtsTransactionPayloadDetails knownPayloadsItem) {
    if (this.knownPayloads == null) {
      this.knownPayloads = new ArrayList<>();
    }
    this.knownPayloads.add(knownPayloadsItem);
    return this;
  }

   /**
   * Get knownPayloads
   * @return knownPayloads
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_KNOWN_PAYLOADS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<LtsTransactionPayloadDetails> getKnownPayloads() {
    return knownPayloads;
  }


  @JsonProperty(JSON_PROPERTY_KNOWN_PAYLOADS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKnownPayloads(List<LtsTransactionPayloadDetails> knownPayloads) {
    this.knownPayloads = knownPayloads;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LtsTransactionStatusResponse ltsTransactionStatusResponse = (LtsTransactionStatusResponse) o;
    return Objects.equals(this.intentStatus, ltsTransactionStatusResponse.intentStatus) &&
        Objects.equals(this.statusDescription, ltsTransactionStatusResponse.statusDescription) &&
        Objects.equals(this.committedStateVersion, ltsTransactionStatusResponse.committedStateVersion) &&
        Objects.equals(this.invalidFromEpoch, ltsTransactionStatusResponse.invalidFromEpoch) &&
        Objects.equals(this.knownPayloads, ltsTransactionStatusResponse.knownPayloads);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intentStatus, statusDescription, committedStateVersion, invalidFromEpoch, knownPayloads);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LtsTransactionStatusResponse {\n");
    sb.append("    intentStatus: ").append(toIndentedString(intentStatus)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    committedStateVersion: ").append(toIndentedString(committedStateVersion)).append("\n");
    sb.append("    invalidFromEpoch: ").append(toIndentedString(invalidFromEpoch)).append("\n");
    sb.append("    knownPayloads: ").append(toIndentedString(knownPayloads)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `intent_status` to the URL query string
    if (getIntentStatus() != null) {
      try {
        joiner.add(String.format("%sintent_status%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIntentStatus()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `status_description` to the URL query string
    if (getStatusDescription() != null) {
      try {
        joiner.add(String.format("%sstatus_description%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatusDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `committed_state_version` to the URL query string
    if (getCommittedStateVersion() != null) {
      try {
        joiner.add(String.format("%scommitted_state_version%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCommittedStateVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `invalid_from_epoch` to the URL query string
    if (getInvalidFromEpoch() != null) {
      try {
        joiner.add(String.format("%sinvalid_from_epoch%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInvalidFromEpoch()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `known_payloads` to the URL query string
    if (getKnownPayloads() != null) {
      for (int i = 0; i < getKnownPayloads().size(); i++) {
        if (getKnownPayloads().get(i) != null) {
          joiner.add(getKnownPayloads().get(i).toUrlQueryString(String.format("%sknown_payloads%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

