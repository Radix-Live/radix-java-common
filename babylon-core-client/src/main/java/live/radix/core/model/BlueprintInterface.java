/*
 * Babylon Core API - RCnet v3.1
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  This version of the Core API belongs to the fourth release candidate of the Radix Babylon network (\"RCnet v3.1\").  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` are guaranteed to be forward compatible to Babylon mainnet launch (and beyond). We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code. 
 *
 * The version of the OpenAPI document: 0.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.core.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import live.radix.core.model.BlueprintPayloadDef;
import live.radix.core.model.FunctionSchema;
import live.radix.core.model.GenericTypeParameter;
import live.radix.core.model.IndexedStateSchema;
import live.radix.core.model.ScopedTypeId;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * BlueprintInterface
 */
@JsonPropertyOrder({
  BlueprintInterface.JSON_PROPERTY_OUTER_BLUEPRINT,
  BlueprintInterface.JSON_PROPERTY_GENERIC_TYPE_PARAMETERS,
  BlueprintInterface.JSON_PROPERTY_IS_TRANSIENT,
  BlueprintInterface.JSON_PROPERTY_FEATURES,
  BlueprintInterface.JSON_PROPERTY_STATE,
  BlueprintInterface.JSON_PROPERTY_FUNCTIONS,
  BlueprintInterface.JSON_PROPERTY_EVENTS,
  BlueprintInterface.JSON_PROPERTY_TYPES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-18T09:57:43.738813900+03:00[Europe/Kiev]")
public class BlueprintInterface {
  public static final String JSON_PROPERTY_OUTER_BLUEPRINT = "outer_blueprint";
  private String outerBlueprint;

  public static final String JSON_PROPERTY_GENERIC_TYPE_PARAMETERS = "generic_type_parameters";
  private List<GenericTypeParameter> genericTypeParameters = new ArrayList<>();

  public static final String JSON_PROPERTY_IS_TRANSIENT = "is_transient";
  private Boolean isTransient;

  public static final String JSON_PROPERTY_FEATURES = "features";
  private List<String> features = new ArrayList<>();

  public static final String JSON_PROPERTY_STATE = "state";
  private IndexedStateSchema state;

  public static final String JSON_PROPERTY_FUNCTIONS = "functions";
  private Map<String, FunctionSchema> functions = new HashMap<>();

  public static final String JSON_PROPERTY_EVENTS = "events";
  private Map<String, BlueprintPayloadDef> events = new HashMap<>();

  public static final String JSON_PROPERTY_TYPES = "types";
  private Map<String, ScopedTypeId> types = new HashMap<>();

  public BlueprintInterface() {
  }

  public BlueprintInterface outerBlueprint(String outerBlueprint) {
    
    this.outerBlueprint = outerBlueprint;
    return this;
  }

   /**
   * Get outerBlueprint
   * @return outerBlueprint
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTER_BLUEPRINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOuterBlueprint() {
    return outerBlueprint;
  }


  @JsonProperty(JSON_PROPERTY_OUTER_BLUEPRINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOuterBlueprint(String outerBlueprint) {
    this.outerBlueprint = outerBlueprint;
  }


  public BlueprintInterface genericTypeParameters(List<GenericTypeParameter> genericTypeParameters) {
    
    this.genericTypeParameters = genericTypeParameters;
    return this;
  }

  public BlueprintInterface addGenericTypeParametersItem(GenericTypeParameter genericTypeParametersItem) {
    if (this.genericTypeParameters == null) {
      this.genericTypeParameters = new ArrayList<>();
    }
    this.genericTypeParameters.add(genericTypeParametersItem);
    return this;
  }

   /**
   * Generic (SBOR) type parameters which need to be filled by a concrete instance of this blueprint. 
   * @return genericTypeParameters
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GENERIC_TYPE_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<GenericTypeParameter> getGenericTypeParameters() {
    return genericTypeParameters;
  }


  @JsonProperty(JSON_PROPERTY_GENERIC_TYPE_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGenericTypeParameters(List<GenericTypeParameter> genericTypeParameters) {
    this.genericTypeParameters = genericTypeParameters;
  }


  public BlueprintInterface isTransient(Boolean isTransient) {
    
    this.isTransient = isTransient;
    return this;
  }

   /**
   * If true, an instantiation of this blueprint cannot be persisted. EG buckets and proofs are transient.
   * @return isTransient
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_TRANSIENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean isIsTransient() {
    return isTransient;
  }


  @JsonProperty(JSON_PROPERTY_IS_TRANSIENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsTransient(Boolean isTransient) {
    this.isTransient = isTransient;
  }


  public BlueprintInterface features(List<String> features) {
    
    this.features = features;
    return this;
  }

  public BlueprintInterface addFeaturesItem(String featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

   /**
   * Get features
   * @return features
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FEATURES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getFeatures() {
    return features;
  }


  @JsonProperty(JSON_PROPERTY_FEATURES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFeatures(List<String> features) {
    this.features = features;
  }


  public BlueprintInterface state(IndexedStateSchema state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public IndexedStateSchema getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(IndexedStateSchema state) {
    this.state = state;
  }


  public BlueprintInterface functions(Map<String, FunctionSchema> functions) {
    
    this.functions = functions;
    return this;
  }

  public BlueprintInterface putFunctionsItem(String key, FunctionSchema functionsItem) {
    this.functions.put(key, functionsItem);
    return this;
  }

   /**
   * A map from the function name to the FunctionSchema
   * @return functions
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FUNCTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, FunctionSchema> getFunctions() {
    return functions;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFunctions(Map<String, FunctionSchema> functions) {
    this.functions = functions;
  }


  public BlueprintInterface events(Map<String, BlueprintPayloadDef> events) {
    
    this.events = events;
    return this;
  }

  public BlueprintInterface putEventsItem(String key, BlueprintPayloadDef eventsItem) {
    this.events.put(key, eventsItem);
    return this;
  }

   /**
   * A map from the event name to the event payload type reference.
   * @return events
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EVENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, BlueprintPayloadDef> getEvents() {
    return events;
  }


  @JsonProperty(JSON_PROPERTY_EVENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEvents(Map<String, BlueprintPayloadDef> events) {
    this.events = events;
  }


  public BlueprintInterface types(Map<String, ScopedTypeId> types) {
    
    this.types = types;
    return this;
  }

  public BlueprintInterface putTypesItem(String key, ScopedTypeId typesItem) {
    this.types.put(key, typesItem);
    return this;
  }

   /**
   * A map from the registered type name to the concrete type, resolved against a schema from the package&#39;s schema partition. 
   * @return types
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, ScopedTypeId> getTypes() {
    return types;
  }


  @JsonProperty(JSON_PROPERTY_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTypes(Map<String, ScopedTypeId> types) {
    this.types = types;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintInterface blueprintInterface = (BlueprintInterface) o;
    return Objects.equals(this.outerBlueprint, blueprintInterface.outerBlueprint) &&
        Objects.equals(this.genericTypeParameters, blueprintInterface.genericTypeParameters) &&
        Objects.equals(this.isTransient, blueprintInterface.isTransient) &&
        Objects.equals(this.features, blueprintInterface.features) &&
        Objects.equals(this.state, blueprintInterface.state) &&
        Objects.equals(this.functions, blueprintInterface.functions) &&
        Objects.equals(this.events, blueprintInterface.events) &&
        Objects.equals(this.types, blueprintInterface.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outerBlueprint, genericTypeParameters, isTransient, features, state, functions, events, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintInterface {\n");
    sb.append("    outerBlueprint: ").append(toIndentedString(outerBlueprint)).append("\n");
    sb.append("    genericTypeParameters: ").append(toIndentedString(genericTypeParameters)).append("\n");
    sb.append("    isTransient: ").append(toIndentedString(isTransient)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    functions: ").append(toIndentedString(functions)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `outer_blueprint` to the URL query string
    if (getOuterBlueprint() != null) {
      try {
        joiner.add(String.format("%souter_blueprint%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOuterBlueprint()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `generic_type_parameters` to the URL query string
    if (getGenericTypeParameters() != null) {
      for (int i = 0; i < getGenericTypeParameters().size(); i++) {
        if (getGenericTypeParameters().get(i) != null) {
          joiner.add(getGenericTypeParameters().get(i).toUrlQueryString(String.format("%sgeneric_type_parameters%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `is_transient` to the URL query string
    if (isIsTransient() != null) {
      try {
        joiner.add(String.format("%sis_transient%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(isIsTransient()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `features` to the URL query string
    if (getFeatures() != null) {
      for (int i = 0; i < getFeatures().size(); i++) {
        try {
          joiner.add(String.format("%sfeatures%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getFeatures().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `state` to the URL query string
    if (getState() != null) {
      joiner.add(getState().toUrlQueryString(prefix + "state" + suffix));
    }

    // add `functions` to the URL query string
    if (getFunctions() != null) {
      for (String _key : getFunctions().keySet()) {
        if (getFunctions().get(_key) != null) {
          joiner.add(getFunctions().get(_key).toUrlQueryString(String.format("%sfunctions%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    // add `events` to the URL query string
    if (getEvents() != null) {
      for (String _key : getEvents().keySet()) {
        if (getEvents().get(_key) != null) {
          joiner.add(getEvents().get(_key).toUrlQueryString(String.format("%sevents%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    // add `types` to the URL query string
    if (getTypes() != null) {
      for (String _key : getTypes().keySet()) {
        if (getTypes().get(_key) != null) {
          joiner.add(getTypes().get(_key).toUrlQueryString(String.format("%stypes%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

