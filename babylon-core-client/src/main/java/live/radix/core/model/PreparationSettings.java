/*
 * Radix Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.core.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * PreparationSettings
 */
@JsonPropertyOrder({
  PreparationSettings.JSON_PROPERTY_V2_TRANSACTIONS_PERMITTED,
  PreparationSettings.JSON_PROPERTY_MAX_USER_PAYLOAD_LENGTH,
  PreparationSettings.JSON_PROPERTY_MAX_LEDGER_PAYLOAD_LENGTH,
  PreparationSettings.JSON_PROPERTY_MAX_CHILD_SUBINTENTS_PER_INTENT,
  PreparationSettings.JSON_PROPERTY_MAX_SUBINTENTS_PER_TRANSACTION,
  PreparationSettings.JSON_PROPERTY_MAX_BLOBS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T13:05:03.171643800+02:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class PreparationSettings {
  public static final String JSON_PROPERTY_V2_TRANSACTIONS_PERMITTED = "v2_transactions_permitted";
  private Boolean v2TransactionsPermitted;

  public static final String JSON_PROPERTY_MAX_USER_PAYLOAD_LENGTH = "max_user_payload_length";
  private String maxUserPayloadLength;

  public static final String JSON_PROPERTY_MAX_LEDGER_PAYLOAD_LENGTH = "max_ledger_payload_length";
  private String maxLedgerPayloadLength;

  public static final String JSON_PROPERTY_MAX_CHILD_SUBINTENTS_PER_INTENT = "max_child_subintents_per_intent";
  private String maxChildSubintentsPerIntent;

  public static final String JSON_PROPERTY_MAX_SUBINTENTS_PER_TRANSACTION = "max_subintents_per_transaction";
  private String maxSubintentsPerTransaction;

  public static final String JSON_PROPERTY_MAX_BLOBS = "max_blobs";
  private String maxBlobs;

  public PreparationSettings() {
  }

  public PreparationSettings v2TransactionsPermitted(Boolean v2TransactionsPermitted) {
    
    this.v2TransactionsPermitted = v2TransactionsPermitted;
    return this;
  }

  /**
   * Get v2TransactionsPermitted
   * @return v2TransactionsPermitted
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_V2_TRANSACTIONS_PERMITTED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean isV2TransactionsPermitted() {
    return v2TransactionsPermitted;
  }


  @JsonProperty(JSON_PROPERTY_V2_TRANSACTIONS_PERMITTED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setV2TransactionsPermitted(Boolean v2TransactionsPermitted) {
    this.v2TransactionsPermitted = v2TransactionsPermitted;
  }

  public PreparationSettings maxUserPayloadLength(String maxUserPayloadLength) {
    
    this.maxUserPayloadLength = maxUserPayloadLength;
    return this;
  }

  /**
   * Get maxUserPayloadLength
   * @return maxUserPayloadLength
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_USER_PAYLOAD_LENGTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMaxUserPayloadLength() {
    return maxUserPayloadLength;
  }


  @JsonProperty(JSON_PROPERTY_MAX_USER_PAYLOAD_LENGTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxUserPayloadLength(String maxUserPayloadLength) {
    this.maxUserPayloadLength = maxUserPayloadLength;
  }

  public PreparationSettings maxLedgerPayloadLength(String maxLedgerPayloadLength) {
    
    this.maxLedgerPayloadLength = maxLedgerPayloadLength;
    return this;
  }

  /**
   * Get maxLedgerPayloadLength
   * @return maxLedgerPayloadLength
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_LEDGER_PAYLOAD_LENGTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMaxLedgerPayloadLength() {
    return maxLedgerPayloadLength;
  }


  @JsonProperty(JSON_PROPERTY_MAX_LEDGER_PAYLOAD_LENGTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxLedgerPayloadLength(String maxLedgerPayloadLength) {
    this.maxLedgerPayloadLength = maxLedgerPayloadLength;
  }

  public PreparationSettings maxChildSubintentsPerIntent(String maxChildSubintentsPerIntent) {
    
    this.maxChildSubintentsPerIntent = maxChildSubintentsPerIntent;
    return this;
  }

  /**
   * Get maxChildSubintentsPerIntent
   * @return maxChildSubintentsPerIntent
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_CHILD_SUBINTENTS_PER_INTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMaxChildSubintentsPerIntent() {
    return maxChildSubintentsPerIntent;
  }


  @JsonProperty(JSON_PROPERTY_MAX_CHILD_SUBINTENTS_PER_INTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxChildSubintentsPerIntent(String maxChildSubintentsPerIntent) {
    this.maxChildSubintentsPerIntent = maxChildSubintentsPerIntent;
  }

  public PreparationSettings maxSubintentsPerTransaction(String maxSubintentsPerTransaction) {
    
    this.maxSubintentsPerTransaction = maxSubintentsPerTransaction;
    return this;
  }

  /**
   * Get maxSubintentsPerTransaction
   * @return maxSubintentsPerTransaction
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_SUBINTENTS_PER_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMaxSubintentsPerTransaction() {
    return maxSubintentsPerTransaction;
  }


  @JsonProperty(JSON_PROPERTY_MAX_SUBINTENTS_PER_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxSubintentsPerTransaction(String maxSubintentsPerTransaction) {
    this.maxSubintentsPerTransaction = maxSubintentsPerTransaction;
  }

  public PreparationSettings maxBlobs(String maxBlobs) {
    
    this.maxBlobs = maxBlobs;
    return this;
  }

  /**
   * Get maxBlobs
   * @return maxBlobs
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_BLOBS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMaxBlobs() {
    return maxBlobs;
  }


  @JsonProperty(JSON_PROPERTY_MAX_BLOBS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxBlobs(String maxBlobs) {
    this.maxBlobs = maxBlobs;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PreparationSettings preparationSettings = (PreparationSettings) o;
    return Objects.equals(this.v2TransactionsPermitted, preparationSettings.v2TransactionsPermitted) &&
        Objects.equals(this.maxUserPayloadLength, preparationSettings.maxUserPayloadLength) &&
        Objects.equals(this.maxLedgerPayloadLength, preparationSettings.maxLedgerPayloadLength) &&
        Objects.equals(this.maxChildSubintentsPerIntent, preparationSettings.maxChildSubintentsPerIntent) &&
        Objects.equals(this.maxSubintentsPerTransaction, preparationSettings.maxSubintentsPerTransaction) &&
        Objects.equals(this.maxBlobs, preparationSettings.maxBlobs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(v2TransactionsPermitted, maxUserPayloadLength, maxLedgerPayloadLength, maxChildSubintentsPerIntent, maxSubintentsPerTransaction, maxBlobs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PreparationSettings {\n");
    sb.append("    v2TransactionsPermitted: ").append(toIndentedString(v2TransactionsPermitted)).append("\n");
    sb.append("    maxUserPayloadLength: ").append(toIndentedString(maxUserPayloadLength)).append("\n");
    sb.append("    maxLedgerPayloadLength: ").append(toIndentedString(maxLedgerPayloadLength)).append("\n");
    sb.append("    maxChildSubintentsPerIntent: ").append(toIndentedString(maxChildSubintentsPerIntent)).append("\n");
    sb.append("    maxSubintentsPerTransaction: ").append(toIndentedString(maxSubintentsPerTransaction)).append("\n");
    sb.append("    maxBlobs: ").append(toIndentedString(maxBlobs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `v2_transactions_permitted` to the URL query string
    if (isV2TransactionsPermitted() != null) {
      try {
        joiner.add(String.format("%sv2_transactions_permitted%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(isV2TransactionsPermitted()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_user_payload_length` to the URL query string
    if (getMaxUserPayloadLength() != null) {
      try {
        joiner.add(String.format("%smax_user_payload_length%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxUserPayloadLength()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_ledger_payload_length` to the URL query string
    if (getMaxLedgerPayloadLength() != null) {
      try {
        joiner.add(String.format("%smax_ledger_payload_length%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxLedgerPayloadLength()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_child_subintents_per_intent` to the URL query string
    if (getMaxChildSubintentsPerIntent() != null) {
      try {
        joiner.add(String.format("%smax_child_subintents_per_intent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxChildSubintentsPerIntent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_subintents_per_transaction` to the URL query string
    if (getMaxSubintentsPerTransaction() != null) {
      try {
        joiner.add(String.format("%smax_subintents_per_transaction%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxSubintentsPerTransaction()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_blobs` to the URL query string
    if (getMaxBlobs() != null) {
      try {
        joiner.add(String.format("%smax_blobs%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxBlobs()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

