/*
 * Babylon Core API - RCnet v3.1
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  This version of the Core API belongs to the fourth release candidate of the Radix Babylon network (\"RCnet v3.1\").  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` are guaranteed to be forward compatible to Babylon mainnet launch (and beyond). We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code. 
 *
 * The version of the OpenAPI document: 0.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.core.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import live.radix.core.model.CommittedStateIdentifier;
import live.radix.core.model.EpochRound;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * NetworkStatusResponse
 */
@JsonPropertyOrder({
  NetworkStatusResponse.JSON_PROPERTY_PRE_GENESIS_STATE_IDENTIFIER,
  NetworkStatusResponse.JSON_PROPERTY_GENESIS_EPOCH_ROUND,
  NetworkStatusResponse.JSON_PROPERTY_POST_GENESIS_STATE_IDENTIFIER,
  NetworkStatusResponse.JSON_PROPERTY_POST_GENESIS_EPOCH_ROUND,
  NetworkStatusResponse.JSON_PROPERTY_CURRENT_STATE_IDENTIFIER,
  NetworkStatusResponse.JSON_PROPERTY_CURRENT_EPOCH_ROUND,
  NetworkStatusResponse.JSON_PROPERTY_CURRENT_PROTOCOL_VERSION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-18T09:57:43.738813900+03:00[Europe/Kiev]")
public class NetworkStatusResponse {
  public static final String JSON_PROPERTY_PRE_GENESIS_STATE_IDENTIFIER = "pre_genesis_state_identifier";
  private CommittedStateIdentifier preGenesisStateIdentifier;

  public static final String JSON_PROPERTY_GENESIS_EPOCH_ROUND = "genesis_epoch_round";
  private EpochRound genesisEpochRound;

  public static final String JSON_PROPERTY_POST_GENESIS_STATE_IDENTIFIER = "post_genesis_state_identifier";
  private CommittedStateIdentifier postGenesisStateIdentifier;

  public static final String JSON_PROPERTY_POST_GENESIS_EPOCH_ROUND = "post_genesis_epoch_round";
  private EpochRound postGenesisEpochRound;

  public static final String JSON_PROPERTY_CURRENT_STATE_IDENTIFIER = "current_state_identifier";
  private CommittedStateIdentifier currentStateIdentifier;

  public static final String JSON_PROPERTY_CURRENT_EPOCH_ROUND = "current_epoch_round";
  private EpochRound currentEpochRound;

  public static final String JSON_PROPERTY_CURRENT_PROTOCOL_VERSION = "current_protocol_version";
  private String currentProtocolVersion;

  public NetworkStatusResponse() {
  }

  public NetworkStatusResponse preGenesisStateIdentifier(CommittedStateIdentifier preGenesisStateIdentifier) {
    
    this.preGenesisStateIdentifier = preGenesisStateIdentifier;
    return this;
  }

   /**
   * Get preGenesisStateIdentifier
   * @return preGenesisStateIdentifier
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PRE_GENESIS_STATE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CommittedStateIdentifier getPreGenesisStateIdentifier() {
    return preGenesisStateIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_PRE_GENESIS_STATE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPreGenesisStateIdentifier(CommittedStateIdentifier preGenesisStateIdentifier) {
    this.preGenesisStateIdentifier = preGenesisStateIdentifier;
  }


  public NetworkStatusResponse genesisEpochRound(EpochRound genesisEpochRound) {
    
    this.genesisEpochRound = genesisEpochRound;
    return this;
  }

   /**
   * Get genesisEpochRound
   * @return genesisEpochRound
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GENESIS_EPOCH_ROUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EpochRound getGenesisEpochRound() {
    return genesisEpochRound;
  }


  @JsonProperty(JSON_PROPERTY_GENESIS_EPOCH_ROUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGenesisEpochRound(EpochRound genesisEpochRound) {
    this.genesisEpochRound = genesisEpochRound;
  }


  public NetworkStatusResponse postGenesisStateIdentifier(CommittedStateIdentifier postGenesisStateIdentifier) {
    
    this.postGenesisStateIdentifier = postGenesisStateIdentifier;
    return this;
  }

   /**
   * Get postGenesisStateIdentifier
   * @return postGenesisStateIdentifier
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POST_GENESIS_STATE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CommittedStateIdentifier getPostGenesisStateIdentifier() {
    return postGenesisStateIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_POST_GENESIS_STATE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostGenesisStateIdentifier(CommittedStateIdentifier postGenesisStateIdentifier) {
    this.postGenesisStateIdentifier = postGenesisStateIdentifier;
  }


  public NetworkStatusResponse postGenesisEpochRound(EpochRound postGenesisEpochRound) {
    
    this.postGenesisEpochRound = postGenesisEpochRound;
    return this;
  }

   /**
   * Get postGenesisEpochRound
   * @return postGenesisEpochRound
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POST_GENESIS_EPOCH_ROUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EpochRound getPostGenesisEpochRound() {
    return postGenesisEpochRound;
  }


  @JsonProperty(JSON_PROPERTY_POST_GENESIS_EPOCH_ROUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostGenesisEpochRound(EpochRound postGenesisEpochRound) {
    this.postGenesisEpochRound = postGenesisEpochRound;
  }


  public NetworkStatusResponse currentStateIdentifier(CommittedStateIdentifier currentStateIdentifier) {
    
    this.currentStateIdentifier = currentStateIdentifier;
    return this;
  }

   /**
   * Get currentStateIdentifier
   * @return currentStateIdentifier
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_STATE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CommittedStateIdentifier getCurrentStateIdentifier() {
    return currentStateIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_STATE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentStateIdentifier(CommittedStateIdentifier currentStateIdentifier) {
    this.currentStateIdentifier = currentStateIdentifier;
  }


  public NetworkStatusResponse currentEpochRound(EpochRound currentEpochRound) {
    
    this.currentEpochRound = currentEpochRound;
    return this;
  }

   /**
   * Get currentEpochRound
   * @return currentEpochRound
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_EPOCH_ROUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EpochRound getCurrentEpochRound() {
    return currentEpochRound;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_EPOCH_ROUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentEpochRound(EpochRound currentEpochRound) {
    this.currentEpochRound = currentEpochRound;
  }


  public NetworkStatusResponse currentProtocolVersion(String currentProtocolVersion) {
    
    this.currentProtocolVersion = currentProtocolVersion;
    return this;
  }

   /**
   * A descriptor for the current protocol version that the node is running. 
   * @return currentProtocolVersion
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENT_PROTOCOL_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrentProtocolVersion() {
    return currentProtocolVersion;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_PROTOCOL_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrentProtocolVersion(String currentProtocolVersion) {
    this.currentProtocolVersion = currentProtocolVersion;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkStatusResponse networkStatusResponse = (NetworkStatusResponse) o;
    return Objects.equals(this.preGenesisStateIdentifier, networkStatusResponse.preGenesisStateIdentifier) &&
        Objects.equals(this.genesisEpochRound, networkStatusResponse.genesisEpochRound) &&
        Objects.equals(this.postGenesisStateIdentifier, networkStatusResponse.postGenesisStateIdentifier) &&
        Objects.equals(this.postGenesisEpochRound, networkStatusResponse.postGenesisEpochRound) &&
        Objects.equals(this.currentStateIdentifier, networkStatusResponse.currentStateIdentifier) &&
        Objects.equals(this.currentEpochRound, networkStatusResponse.currentEpochRound) &&
        Objects.equals(this.currentProtocolVersion, networkStatusResponse.currentProtocolVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(preGenesisStateIdentifier, genesisEpochRound, postGenesisStateIdentifier, postGenesisEpochRound, currentStateIdentifier, currentEpochRound, currentProtocolVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkStatusResponse {\n");
    sb.append("    preGenesisStateIdentifier: ").append(toIndentedString(preGenesisStateIdentifier)).append("\n");
    sb.append("    genesisEpochRound: ").append(toIndentedString(genesisEpochRound)).append("\n");
    sb.append("    postGenesisStateIdentifier: ").append(toIndentedString(postGenesisStateIdentifier)).append("\n");
    sb.append("    postGenesisEpochRound: ").append(toIndentedString(postGenesisEpochRound)).append("\n");
    sb.append("    currentStateIdentifier: ").append(toIndentedString(currentStateIdentifier)).append("\n");
    sb.append("    currentEpochRound: ").append(toIndentedString(currentEpochRound)).append("\n");
    sb.append("    currentProtocolVersion: ").append(toIndentedString(currentProtocolVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `pre_genesis_state_identifier` to the URL query string
    if (getPreGenesisStateIdentifier() != null) {
      joiner.add(getPreGenesisStateIdentifier().toUrlQueryString(prefix + "pre_genesis_state_identifier" + suffix));
    }

    // add `genesis_epoch_round` to the URL query string
    if (getGenesisEpochRound() != null) {
      joiner.add(getGenesisEpochRound().toUrlQueryString(prefix + "genesis_epoch_round" + suffix));
    }

    // add `post_genesis_state_identifier` to the URL query string
    if (getPostGenesisStateIdentifier() != null) {
      joiner.add(getPostGenesisStateIdentifier().toUrlQueryString(prefix + "post_genesis_state_identifier" + suffix));
    }

    // add `post_genesis_epoch_round` to the URL query string
    if (getPostGenesisEpochRound() != null) {
      joiner.add(getPostGenesisEpochRound().toUrlQueryString(prefix + "post_genesis_epoch_round" + suffix));
    }

    // add `current_state_identifier` to the URL query string
    if (getCurrentStateIdentifier() != null) {
      joiner.add(getCurrentStateIdentifier().toUrlQueryString(prefix + "current_state_identifier" + suffix));
    }

    // add `current_epoch_round` to the URL query string
    if (getCurrentEpochRound() != null) {
      joiner.add(getCurrentEpochRound().toUrlQueryString(prefix + "current_epoch_round" + suffix));
    }

    // add `current_protocol_version` to the URL query string
    if (getCurrentProtocolVersion() != null) {
      try {
        joiner.add(String.format("%scurrent_protocol_version%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCurrentProtocolVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

