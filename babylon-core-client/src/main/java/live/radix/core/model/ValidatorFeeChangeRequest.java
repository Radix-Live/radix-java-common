/*
 * Babylon Core API - RCnet v3.1
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  This version of the Core API belongs to the fourth release candidate of the Radix Babylon network (\"RCnet v3.1\").  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` are guaranteed to be forward compatible to Babylon mainnet launch (and beyond). We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code. 
 *
 * The version of the OpenAPI document: 0.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.core.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ValidatorFeeChangeRequest
 */
@JsonPropertyOrder({
  ValidatorFeeChangeRequest.JSON_PROPERTY_EPOCH_EFFECTIVE,
  ValidatorFeeChangeRequest.JSON_PROPERTY_NEW_FEE_FACTOR
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-18T09:57:43.738813900+03:00[Europe/Kiev]")
public class ValidatorFeeChangeRequest {
  public static final String JSON_PROPERTY_EPOCH_EFFECTIVE = "epoch_effective";
  private Long epochEffective;

  public static final String JSON_PROPERTY_NEW_FEE_FACTOR = "new_fee_factor";
  private String newFeeFactor;

  public ValidatorFeeChangeRequest() {
  }

  public ValidatorFeeChangeRequest epochEffective(Long epochEffective) {
    
    this.epochEffective = epochEffective;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;10^10&#x60;, marking the epoch at which the fee change becomes effective. 
   * minimum: 0
   * maximum: 10000000000
   * @return epochEffective
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EPOCH_EFFECTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getEpochEffective() {
    return epochEffective;
  }


  @JsonProperty(JSON_PROPERTY_EPOCH_EFFECTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEpochEffective(Long epochEffective) {
    this.epochEffective = epochEffective;
  }


  public ValidatorFeeChangeRequest newFeeFactor(String newFeeFactor) {
    
    this.newFeeFactor = newFeeFactor;
    return this;
  }

   /**
   * A string-encoded fixed-precision decimal to 18 decimal places. A decimal is formed of some signed integer &#x60;m&#x60; of attos (&#x60;10^(-18)&#x60;) units, where &#x60;-2^(192 - 1) &lt;&#x3D; m &lt; 2^(192 - 1)&#x60;. 
   * @return newFeeFactor
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NEW_FEE_FACTOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNewFeeFactor() {
    return newFeeFactor;
  }


  @JsonProperty(JSON_PROPERTY_NEW_FEE_FACTOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNewFeeFactor(String newFeeFactor) {
    this.newFeeFactor = newFeeFactor;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidatorFeeChangeRequest validatorFeeChangeRequest = (ValidatorFeeChangeRequest) o;
    return Objects.equals(this.epochEffective, validatorFeeChangeRequest.epochEffective) &&
        Objects.equals(this.newFeeFactor, validatorFeeChangeRequest.newFeeFactor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(epochEffective, newFeeFactor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidatorFeeChangeRequest {\n");
    sb.append("    epochEffective: ").append(toIndentedString(epochEffective)).append("\n");
    sb.append("    newFeeFactor: ").append(toIndentedString(newFeeFactor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `epoch_effective` to the URL query string
    if (getEpochEffective() != null) {
      try {
        joiner.add(String.format("%sepoch_effective%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEpochEffective()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `new_fee_factor` to the URL query string
    if (getNewFeeFactor() != null) {
      try {
        joiner.add(String.format("%snew_fee_factor%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNewFeeFactor()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

