/*
 * Radix Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.core.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import live.radix.core.model.ManifestValidationRuleset;
import live.radix.core.model.MessageValidationConfig;
import live.radix.core.model.PreparationSettings;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * TransactionValidationConfig
 */
@JsonPropertyOrder({
  TransactionValidationConfig.JSON_PROPERTY_MAX_SIGNER_SIGNATURES_PER_INTENT,
  TransactionValidationConfig.JSON_PROPERTY_MAX_REFERENCES_PER_INTENT,
  TransactionValidationConfig.JSON_PROPERTY_MIN_TIP_PERCENTAGE,
  TransactionValidationConfig.JSON_PROPERTY_MAX_TIP_PERCENTAGE,
  TransactionValidationConfig.JSON_PROPERTY_MAX_EPOCH_RANGE,
  TransactionValidationConfig.JSON_PROPERTY_MAX_INSTRUCTIONS,
  TransactionValidationConfig.JSON_PROPERTY_MESSAGE_VALIDATION,
  TransactionValidationConfig.JSON_PROPERTY_V1_TRANSACTIONS_ALLOW_NOTARY_TO_DUPLICATE_SIGNER,
  TransactionValidationConfig.JSON_PROPERTY_PREPARATION_SETTINGS,
  TransactionValidationConfig.JSON_PROPERTY_MANIFEST_VALIDATION,
  TransactionValidationConfig.JSON_PROPERTY_V2_TRANSACTIONS_ALLOWED,
  TransactionValidationConfig.JSON_PROPERTY_MIN_TIP_BASIS_POINTS,
  TransactionValidationConfig.JSON_PROPERTY_MAX_TIP_BASIS_POINTS,
  TransactionValidationConfig.JSON_PROPERTY_MAX_SUBINTENT_DEPTH,
  TransactionValidationConfig.JSON_PROPERTY_MAX_TOTAL_SIGNATURE_VALIDATIONS,
  TransactionValidationConfig.JSON_PROPERTY_MAX_TOTAL_REFERENCES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-26T13:05:03.171643800+02:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class TransactionValidationConfig {
  public static final String JSON_PROPERTY_MAX_SIGNER_SIGNATURES_PER_INTENT = "max_signer_signatures_per_intent";
  private String maxSignerSignaturesPerIntent;

  public static final String JSON_PROPERTY_MAX_REFERENCES_PER_INTENT = "max_references_per_intent";
  private String maxReferencesPerIntent;

  public static final String JSON_PROPERTY_MIN_TIP_PERCENTAGE = "min_tip_percentage";
  private Integer minTipPercentage;

  public static final String JSON_PROPERTY_MAX_TIP_PERCENTAGE = "max_tip_percentage";
  private Integer maxTipPercentage;

  public static final String JSON_PROPERTY_MAX_EPOCH_RANGE = "max_epoch_range";
  private String maxEpochRange;

  public static final String JSON_PROPERTY_MAX_INSTRUCTIONS = "max_instructions";
  private String maxInstructions;

  public static final String JSON_PROPERTY_MESSAGE_VALIDATION = "message_validation";
  private MessageValidationConfig messageValidation;

  public static final String JSON_PROPERTY_V1_TRANSACTIONS_ALLOW_NOTARY_TO_DUPLICATE_SIGNER = "v1_transactions_allow_notary_to_duplicate_signer";
  private Boolean v1TransactionsAllowNotaryToDuplicateSigner;

  public static final String JSON_PROPERTY_PREPARATION_SETTINGS = "preparation_settings";
  private PreparationSettings preparationSettings;

  public static final String JSON_PROPERTY_MANIFEST_VALIDATION = "manifest_validation";
  private ManifestValidationRuleset manifestValidation;

  public static final String JSON_PROPERTY_V2_TRANSACTIONS_ALLOWED = "v2_transactions_allowed";
  private Boolean v2TransactionsAllowed;

  public static final String JSON_PROPERTY_MIN_TIP_BASIS_POINTS = "min_tip_basis_points";
  private Long minTipBasisPoints;

  public static final String JSON_PROPERTY_MAX_TIP_BASIS_POINTS = "max_tip_basis_points";
  private Long maxTipBasisPoints;

  public static final String JSON_PROPERTY_MAX_SUBINTENT_DEPTH = "max_subintent_depth";
  private String maxSubintentDepth;

  public static final String JSON_PROPERTY_MAX_TOTAL_SIGNATURE_VALIDATIONS = "max_total_signature_validations";
  private String maxTotalSignatureValidations;

  public static final String JSON_PROPERTY_MAX_TOTAL_REFERENCES = "max_total_references";
  private String maxTotalReferences;

  public TransactionValidationConfig() {
  }

  public TransactionValidationConfig maxSignerSignaturesPerIntent(String maxSignerSignaturesPerIntent) {
    
    this.maxSignerSignaturesPerIntent = maxSignerSignaturesPerIntent;
    return this;
  }

  /**
   * Get maxSignerSignaturesPerIntent
   * @return maxSignerSignaturesPerIntent
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_SIGNER_SIGNATURES_PER_INTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMaxSignerSignaturesPerIntent() {
    return maxSignerSignaturesPerIntent;
  }


  @JsonProperty(JSON_PROPERTY_MAX_SIGNER_SIGNATURES_PER_INTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxSignerSignaturesPerIntent(String maxSignerSignaturesPerIntent) {
    this.maxSignerSignaturesPerIntent = maxSignerSignaturesPerIntent;
  }

  public TransactionValidationConfig maxReferencesPerIntent(String maxReferencesPerIntent) {
    
    this.maxReferencesPerIntent = maxReferencesPerIntent;
    return this;
  }

  /**
   * Get maxReferencesPerIntent
   * @return maxReferencesPerIntent
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_REFERENCES_PER_INTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMaxReferencesPerIntent() {
    return maxReferencesPerIntent;
  }


  @JsonProperty(JSON_PROPERTY_MAX_REFERENCES_PER_INTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxReferencesPerIntent(String maxReferencesPerIntent) {
    this.maxReferencesPerIntent = maxReferencesPerIntent;
  }

  public TransactionValidationConfig minTipPercentage(Integer minTipPercentage) {
    
    this.minTipPercentage = minTipPercentage;
    return this;
  }

  /**
   * Only applies to V1 transactions
   * minimum: 0
   * maximum: 65535
   * @return minTipPercentage
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MIN_TIP_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMinTipPercentage() {
    return minTipPercentage;
  }


  @JsonProperty(JSON_PROPERTY_MIN_TIP_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinTipPercentage(Integer minTipPercentage) {
    this.minTipPercentage = minTipPercentage;
  }

  public TransactionValidationConfig maxTipPercentage(Integer maxTipPercentage) {
    
    this.maxTipPercentage = maxTipPercentage;
    return this;
  }

  /**
   * Only applies to V1 transactions
   * minimum: 0
   * maximum: 65535
   * @return maxTipPercentage
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_TIP_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMaxTipPercentage() {
    return maxTipPercentage;
  }


  @JsonProperty(JSON_PROPERTY_MAX_TIP_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxTipPercentage(Integer maxTipPercentage) {
    this.maxTipPercentage = maxTipPercentage;
  }

  public TransactionValidationConfig maxEpochRange(String maxEpochRange) {
    
    this.maxEpochRange = maxEpochRange;
    return this;
  }

  /**
   * Get maxEpochRange
   * @return maxEpochRange
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_EPOCH_RANGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMaxEpochRange() {
    return maxEpochRange;
  }


  @JsonProperty(JSON_PROPERTY_MAX_EPOCH_RANGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxEpochRange(String maxEpochRange) {
    this.maxEpochRange = maxEpochRange;
  }

  public TransactionValidationConfig maxInstructions(String maxInstructions) {
    
    this.maxInstructions = maxInstructions;
    return this;
  }

  /**
   * Get maxInstructions
   * @return maxInstructions
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMaxInstructions() {
    return maxInstructions;
  }


  @JsonProperty(JSON_PROPERTY_MAX_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxInstructions(String maxInstructions) {
    this.maxInstructions = maxInstructions;
  }

  public TransactionValidationConfig messageValidation(MessageValidationConfig messageValidation) {
    
    this.messageValidation = messageValidation;
    return this;
  }

  /**
   * Get messageValidation
   * @return messageValidation
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGE_VALIDATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MessageValidationConfig getMessageValidation() {
    return messageValidation;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE_VALIDATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessageValidation(MessageValidationConfig messageValidation) {
    this.messageValidation = messageValidation;
  }

  public TransactionValidationConfig v1TransactionsAllowNotaryToDuplicateSigner(Boolean v1TransactionsAllowNotaryToDuplicateSigner) {
    
    this.v1TransactionsAllowNotaryToDuplicateSigner = v1TransactionsAllowNotaryToDuplicateSigner;
    return this;
  }

  /**
   * Get v1TransactionsAllowNotaryToDuplicateSigner
   * @return v1TransactionsAllowNotaryToDuplicateSigner
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_V1_TRANSACTIONS_ALLOW_NOTARY_TO_DUPLICATE_SIGNER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean isV1TransactionsAllowNotaryToDuplicateSigner() {
    return v1TransactionsAllowNotaryToDuplicateSigner;
  }


  @JsonProperty(JSON_PROPERTY_V1_TRANSACTIONS_ALLOW_NOTARY_TO_DUPLICATE_SIGNER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setV1TransactionsAllowNotaryToDuplicateSigner(Boolean v1TransactionsAllowNotaryToDuplicateSigner) {
    this.v1TransactionsAllowNotaryToDuplicateSigner = v1TransactionsAllowNotaryToDuplicateSigner;
  }

  public TransactionValidationConfig preparationSettings(PreparationSettings preparationSettings) {
    
    this.preparationSettings = preparationSettings;
    return this;
  }

  /**
   * Get preparationSettings
   * @return preparationSettings
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PREPARATION_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PreparationSettings getPreparationSettings() {
    return preparationSettings;
  }


  @JsonProperty(JSON_PROPERTY_PREPARATION_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPreparationSettings(PreparationSettings preparationSettings) {
    this.preparationSettings = preparationSettings;
  }

  public TransactionValidationConfig manifestValidation(ManifestValidationRuleset manifestValidation) {
    
    this.manifestValidation = manifestValidation;
    return this;
  }

  /**
   * Get manifestValidation
   * @return manifestValidation
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MANIFEST_VALIDATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ManifestValidationRuleset getManifestValidation() {
    return manifestValidation;
  }


  @JsonProperty(JSON_PROPERTY_MANIFEST_VALIDATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setManifestValidation(ManifestValidationRuleset manifestValidation) {
    this.manifestValidation = manifestValidation;
  }

  public TransactionValidationConfig v2TransactionsAllowed(Boolean v2TransactionsAllowed) {
    
    this.v2TransactionsAllowed = v2TransactionsAllowed;
    return this;
  }

  /**
   * Get v2TransactionsAllowed
   * @return v2TransactionsAllowed
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_V2_TRANSACTIONS_ALLOWED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean isV2TransactionsAllowed() {
    return v2TransactionsAllowed;
  }


  @JsonProperty(JSON_PROPERTY_V2_TRANSACTIONS_ALLOWED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setV2TransactionsAllowed(Boolean v2TransactionsAllowed) {
    this.v2TransactionsAllowed = v2TransactionsAllowed;
  }

  public TransactionValidationConfig minTipBasisPoints(Long minTipBasisPoints) {
    
    this.minTipBasisPoints = minTipBasisPoints;
    return this;
  }

  /**
   * Get minTipBasisPoints
   * minimum: 0
   * maximum: 4294967295
   * @return minTipBasisPoints
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MIN_TIP_BASIS_POINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getMinTipBasisPoints() {
    return minTipBasisPoints;
  }


  @JsonProperty(JSON_PROPERTY_MIN_TIP_BASIS_POINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinTipBasisPoints(Long minTipBasisPoints) {
    this.minTipBasisPoints = minTipBasisPoints;
  }

  public TransactionValidationConfig maxTipBasisPoints(Long maxTipBasisPoints) {
    
    this.maxTipBasisPoints = maxTipBasisPoints;
    return this;
  }

  /**
   * Get maxTipBasisPoints
   * minimum: 0
   * maximum: 4294967295
   * @return maxTipBasisPoints
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_TIP_BASIS_POINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getMaxTipBasisPoints() {
    return maxTipBasisPoints;
  }


  @JsonProperty(JSON_PROPERTY_MAX_TIP_BASIS_POINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxTipBasisPoints(Long maxTipBasisPoints) {
    this.maxTipBasisPoints = maxTipBasisPoints;
  }

  public TransactionValidationConfig maxSubintentDepth(String maxSubintentDepth) {
    
    this.maxSubintentDepth = maxSubintentDepth;
    return this;
  }

  /**
   * Get maxSubintentDepth
   * @return maxSubintentDepth
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_SUBINTENT_DEPTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMaxSubintentDepth() {
    return maxSubintentDepth;
  }


  @JsonProperty(JSON_PROPERTY_MAX_SUBINTENT_DEPTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxSubintentDepth(String maxSubintentDepth) {
    this.maxSubintentDepth = maxSubintentDepth;
  }

  public TransactionValidationConfig maxTotalSignatureValidations(String maxTotalSignatureValidations) {
    
    this.maxTotalSignatureValidations = maxTotalSignatureValidations;
    return this;
  }

  /**
   * Get maxTotalSignatureValidations
   * @return maxTotalSignatureValidations
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_TOTAL_SIGNATURE_VALIDATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMaxTotalSignatureValidations() {
    return maxTotalSignatureValidations;
  }


  @JsonProperty(JSON_PROPERTY_MAX_TOTAL_SIGNATURE_VALIDATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxTotalSignatureValidations(String maxTotalSignatureValidations) {
    this.maxTotalSignatureValidations = maxTotalSignatureValidations;
  }

  public TransactionValidationConfig maxTotalReferences(String maxTotalReferences) {
    
    this.maxTotalReferences = maxTotalReferences;
    return this;
  }

  /**
   * Get maxTotalReferences
   * @return maxTotalReferences
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_TOTAL_REFERENCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMaxTotalReferences() {
    return maxTotalReferences;
  }


  @JsonProperty(JSON_PROPERTY_MAX_TOTAL_REFERENCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxTotalReferences(String maxTotalReferences) {
    this.maxTotalReferences = maxTotalReferences;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionValidationConfig transactionValidationConfig = (TransactionValidationConfig) o;
    return Objects.equals(this.maxSignerSignaturesPerIntent, transactionValidationConfig.maxSignerSignaturesPerIntent) &&
        Objects.equals(this.maxReferencesPerIntent, transactionValidationConfig.maxReferencesPerIntent) &&
        Objects.equals(this.minTipPercentage, transactionValidationConfig.minTipPercentage) &&
        Objects.equals(this.maxTipPercentage, transactionValidationConfig.maxTipPercentage) &&
        Objects.equals(this.maxEpochRange, transactionValidationConfig.maxEpochRange) &&
        Objects.equals(this.maxInstructions, transactionValidationConfig.maxInstructions) &&
        Objects.equals(this.messageValidation, transactionValidationConfig.messageValidation) &&
        Objects.equals(this.v1TransactionsAllowNotaryToDuplicateSigner, transactionValidationConfig.v1TransactionsAllowNotaryToDuplicateSigner) &&
        Objects.equals(this.preparationSettings, transactionValidationConfig.preparationSettings) &&
        Objects.equals(this.manifestValidation, transactionValidationConfig.manifestValidation) &&
        Objects.equals(this.v2TransactionsAllowed, transactionValidationConfig.v2TransactionsAllowed) &&
        Objects.equals(this.minTipBasisPoints, transactionValidationConfig.minTipBasisPoints) &&
        Objects.equals(this.maxTipBasisPoints, transactionValidationConfig.maxTipBasisPoints) &&
        Objects.equals(this.maxSubintentDepth, transactionValidationConfig.maxSubintentDepth) &&
        Objects.equals(this.maxTotalSignatureValidations, transactionValidationConfig.maxTotalSignatureValidations) &&
        Objects.equals(this.maxTotalReferences, transactionValidationConfig.maxTotalReferences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxSignerSignaturesPerIntent, maxReferencesPerIntent, minTipPercentage, maxTipPercentage, maxEpochRange, maxInstructions, messageValidation, v1TransactionsAllowNotaryToDuplicateSigner, preparationSettings, manifestValidation, v2TransactionsAllowed, minTipBasisPoints, maxTipBasisPoints, maxSubintentDepth, maxTotalSignatureValidations, maxTotalReferences);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionValidationConfig {\n");
    sb.append("    maxSignerSignaturesPerIntent: ").append(toIndentedString(maxSignerSignaturesPerIntent)).append("\n");
    sb.append("    maxReferencesPerIntent: ").append(toIndentedString(maxReferencesPerIntent)).append("\n");
    sb.append("    minTipPercentage: ").append(toIndentedString(minTipPercentage)).append("\n");
    sb.append("    maxTipPercentage: ").append(toIndentedString(maxTipPercentage)).append("\n");
    sb.append("    maxEpochRange: ").append(toIndentedString(maxEpochRange)).append("\n");
    sb.append("    maxInstructions: ").append(toIndentedString(maxInstructions)).append("\n");
    sb.append("    messageValidation: ").append(toIndentedString(messageValidation)).append("\n");
    sb.append("    v1TransactionsAllowNotaryToDuplicateSigner: ").append(toIndentedString(v1TransactionsAllowNotaryToDuplicateSigner)).append("\n");
    sb.append("    preparationSettings: ").append(toIndentedString(preparationSettings)).append("\n");
    sb.append("    manifestValidation: ").append(toIndentedString(manifestValidation)).append("\n");
    sb.append("    v2TransactionsAllowed: ").append(toIndentedString(v2TransactionsAllowed)).append("\n");
    sb.append("    minTipBasisPoints: ").append(toIndentedString(minTipBasisPoints)).append("\n");
    sb.append("    maxTipBasisPoints: ").append(toIndentedString(maxTipBasisPoints)).append("\n");
    sb.append("    maxSubintentDepth: ").append(toIndentedString(maxSubintentDepth)).append("\n");
    sb.append("    maxTotalSignatureValidations: ").append(toIndentedString(maxTotalSignatureValidations)).append("\n");
    sb.append("    maxTotalReferences: ").append(toIndentedString(maxTotalReferences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `max_signer_signatures_per_intent` to the URL query string
    if (getMaxSignerSignaturesPerIntent() != null) {
      try {
        joiner.add(String.format("%smax_signer_signatures_per_intent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxSignerSignaturesPerIntent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_references_per_intent` to the URL query string
    if (getMaxReferencesPerIntent() != null) {
      try {
        joiner.add(String.format("%smax_references_per_intent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxReferencesPerIntent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `min_tip_percentage` to the URL query string
    if (getMinTipPercentage() != null) {
      try {
        joiner.add(String.format("%smin_tip_percentage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMinTipPercentage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_tip_percentage` to the URL query string
    if (getMaxTipPercentage() != null) {
      try {
        joiner.add(String.format("%smax_tip_percentage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxTipPercentage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_epoch_range` to the URL query string
    if (getMaxEpochRange() != null) {
      try {
        joiner.add(String.format("%smax_epoch_range%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxEpochRange()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_instructions` to the URL query string
    if (getMaxInstructions() != null) {
      try {
        joiner.add(String.format("%smax_instructions%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxInstructions()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `message_validation` to the URL query string
    if (getMessageValidation() != null) {
      joiner.add(getMessageValidation().toUrlQueryString(prefix + "message_validation" + suffix));
    }

    // add `v1_transactions_allow_notary_to_duplicate_signer` to the URL query string
    if (isV1TransactionsAllowNotaryToDuplicateSigner() != null) {
      try {
        joiner.add(String.format("%sv1_transactions_allow_notary_to_duplicate_signer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(isV1TransactionsAllowNotaryToDuplicateSigner()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `preparation_settings` to the URL query string
    if (getPreparationSettings() != null) {
      joiner.add(getPreparationSettings().toUrlQueryString(prefix + "preparation_settings" + suffix));
    }

    // add `manifest_validation` to the URL query string
    if (getManifestValidation() != null) {
      try {
        joiner.add(String.format("%smanifest_validation%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getManifestValidation()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `v2_transactions_allowed` to the URL query string
    if (isV2TransactionsAllowed() != null) {
      try {
        joiner.add(String.format("%sv2_transactions_allowed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(isV2TransactionsAllowed()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `min_tip_basis_points` to the URL query string
    if (getMinTipBasisPoints() != null) {
      try {
        joiner.add(String.format("%smin_tip_basis_points%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMinTipBasisPoints()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_tip_basis_points` to the URL query string
    if (getMaxTipBasisPoints() != null) {
      try {
        joiner.add(String.format("%smax_tip_basis_points%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxTipBasisPoints()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_subintent_depth` to the URL query string
    if (getMaxSubintentDepth() != null) {
      try {
        joiner.add(String.format("%smax_subintent_depth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxSubintentDepth()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_total_signature_validations` to the URL query string
    if (getMaxTotalSignatureValidations() != null) {
      try {
        joiner.add(String.format("%smax_total_signature_validations%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxTotalSignatureValidations()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_total_references` to the URL query string
    if (getMaxTotalReferences() != null) {
      try {
        joiner.add(String.format("%smax_total_references%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxTotalReferences()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

