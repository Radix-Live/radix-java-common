/*
 * Radix Core API - Babylon (Bottlenose)
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.core.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import live.radix.core.model.InstantMs;
import live.radix.core.model.TransactionSubmitErrorDetails;
import live.radix.core.model.TransactionSubmitErrorDetailsType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * TransactionSubmitRejectedErrorDetails
 */
@JsonPropertyOrder({
  TransactionSubmitRejectedErrorDetails.JSON_PROPERTY_ERROR_MESSAGE,
  TransactionSubmitRejectedErrorDetails.JSON_PROPERTY_IS_FRESH,
  TransactionSubmitRejectedErrorDetails.JSON_PROPERTY_IS_PAYLOAD_REJECTION_PERMANENT,
  TransactionSubmitRejectedErrorDetails.JSON_PROPERTY_IS_INTENT_REJECTION_PERMANENT,
  TransactionSubmitRejectedErrorDetails.JSON_PROPERTY_RETRY_FROM_TIMESTAMP,
  TransactionSubmitRejectedErrorDetails.JSON_PROPERTY_RETRY_FROM_EPOCH,
  TransactionSubmitRejectedErrorDetails.JSON_PROPERTY_INVALID_FROM_EPOCH
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-14T23:48:58.387759700+03:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class TransactionSubmitRejectedErrorDetails extends TransactionSubmitErrorDetails {
  public static final String JSON_PROPERTY_ERROR_MESSAGE = "error_message";
  private String errorMessage;

  public static final String JSON_PROPERTY_IS_FRESH = "is_fresh";
  private Boolean isFresh;

  public static final String JSON_PROPERTY_IS_PAYLOAD_REJECTION_PERMANENT = "is_payload_rejection_permanent";
  private Boolean isPayloadRejectionPermanent;

  public static final String JSON_PROPERTY_IS_INTENT_REJECTION_PERMANENT = "is_intent_rejection_permanent";
  private Boolean isIntentRejectionPermanent;

  public static final String JSON_PROPERTY_RETRY_FROM_TIMESTAMP = "retry_from_timestamp";
  private InstantMs retryFromTimestamp;

  public static final String JSON_PROPERTY_RETRY_FROM_EPOCH = "retry_from_epoch";
  private Long retryFromEpoch;

  public static final String JSON_PROPERTY_INVALID_FROM_EPOCH = "invalid_from_epoch";
  private Long invalidFromEpoch;

  public TransactionSubmitRejectedErrorDetails() {

  }

  public TransactionSubmitRejectedErrorDetails errorMessage(String errorMessage) {
    
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * An explanation of the error
   * @return errorMessage
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getErrorMessage() {
    return errorMessage;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  public TransactionSubmitRejectedErrorDetails isFresh(Boolean isFresh) {
    
    this.isFresh = isFresh;
    return this;
  }

  /**
   * Whether (true) this rejected status has just been calculated fresh, or (false) the status is from the pending transaction result cache. 
   * @return isFresh
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_FRESH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean isIsFresh() {
    return isFresh;
  }


  @JsonProperty(JSON_PROPERTY_IS_FRESH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsFresh(Boolean isFresh) {
    this.isFresh = isFresh;
  }

  public TransactionSubmitRejectedErrorDetails isPayloadRejectionPermanent(Boolean isPayloadRejectionPermanent) {
    
    this.isPayloadRejectionPermanent = isPayloadRejectionPermanent;
    return this;
  }

  /**
   * Whether the rejection of this payload is known to be permanent. 
   * @return isPayloadRejectionPermanent
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_PAYLOAD_REJECTION_PERMANENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean isIsPayloadRejectionPermanent() {
    return isPayloadRejectionPermanent;
  }


  @JsonProperty(JSON_PROPERTY_IS_PAYLOAD_REJECTION_PERMANENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsPayloadRejectionPermanent(Boolean isPayloadRejectionPermanent) {
    this.isPayloadRejectionPermanent = isPayloadRejectionPermanent;
  }

  public TransactionSubmitRejectedErrorDetails isIntentRejectionPermanent(Boolean isIntentRejectionPermanent) {
    
    this.isIntentRejectionPermanent = isIntentRejectionPermanent;
    return this;
  }

  /**
   * Whether the rejection of this intent is known to be permanent - this is a stronger statement than the payload rejection being permanent, as it implies any payloads containing the intent will also be permanently rejected. 
   * @return isIntentRejectionPermanent
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_INTENT_REJECTION_PERMANENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean isIsIntentRejectionPermanent() {
    return isIntentRejectionPermanent;
  }


  @JsonProperty(JSON_PROPERTY_IS_INTENT_REJECTION_PERMANENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsIntentRejectionPermanent(Boolean isIntentRejectionPermanent) {
    this.isIntentRejectionPermanent = isIntentRejectionPermanent;
  }

  public TransactionSubmitRejectedErrorDetails retryFromTimestamp(InstantMs retryFromTimestamp) {
    
    this.retryFromTimestamp = retryFromTimestamp;
    return this;
  }

  /**
   * The time after which the node will consider recalculating the validity of the transaction. Only present if the rejection is temporary, and not due to the header specifying a \&quot;from epoch\&quot; in the future. 
   * @return retryFromTimestamp
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RETRY_FROM_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InstantMs getRetryFromTimestamp() {
    return retryFromTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_RETRY_FROM_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRetryFromTimestamp(InstantMs retryFromTimestamp) {
    this.retryFromTimestamp = retryFromTimestamp;
  }

  public TransactionSubmitRejectedErrorDetails retryFromEpoch(Long retryFromEpoch) {
    
    this.retryFromEpoch = retryFromEpoch;
    return this;
  }

  /**
   * An integer between &#x60;0&#x60; and &#x60;10^10&#x60;, marking the epoch after which the node will consider recalculating the validity of the transaction. Only present if the rejection is temporary due to a header specifying a \&quot;from epoch\&quot; in the future. 
   * minimum: 0
   * maximum: 10000000000
   * @return retryFromEpoch
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RETRY_FROM_EPOCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getRetryFromEpoch() {
    return retryFromEpoch;
  }


  @JsonProperty(JSON_PROPERTY_RETRY_FROM_EPOCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRetryFromEpoch(Long retryFromEpoch) {
    this.retryFromEpoch = retryFromEpoch;
  }

  public TransactionSubmitRejectedErrorDetails invalidFromEpoch(Long invalidFromEpoch) {
    
    this.invalidFromEpoch = invalidFromEpoch;
    return this;
  }

  /**
   * An integer between &#x60;0&#x60; and &#x60;10^10&#x60;, marking the epoch from which the transaction will no longer be valid, and be permanently rejected. Only present if the rejection isn&#39;t permanent. 
   * minimum: 0
   * maximum: 10000000000
   * @return invalidFromEpoch
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVALID_FROM_EPOCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getInvalidFromEpoch() {
    return invalidFromEpoch;
  }


  @JsonProperty(JSON_PROPERTY_INVALID_FROM_EPOCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvalidFromEpoch(Long invalidFromEpoch) {
    this.invalidFromEpoch = invalidFromEpoch;
  }

  @Override
  public TransactionSubmitRejectedErrorDetails type(TransactionSubmitErrorDetailsType type) {
    this.setType(type);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionSubmitRejectedErrorDetails transactionSubmitRejectedErrorDetails = (TransactionSubmitRejectedErrorDetails) o;
    return Objects.equals(this.errorMessage, transactionSubmitRejectedErrorDetails.errorMessage) &&
        Objects.equals(this.isFresh, transactionSubmitRejectedErrorDetails.isFresh) &&
        Objects.equals(this.isPayloadRejectionPermanent, transactionSubmitRejectedErrorDetails.isPayloadRejectionPermanent) &&
        Objects.equals(this.isIntentRejectionPermanent, transactionSubmitRejectedErrorDetails.isIntentRejectionPermanent) &&
        Objects.equals(this.retryFromTimestamp, transactionSubmitRejectedErrorDetails.retryFromTimestamp) &&
        Objects.equals(this.retryFromEpoch, transactionSubmitRejectedErrorDetails.retryFromEpoch) &&
        Objects.equals(this.invalidFromEpoch, transactionSubmitRejectedErrorDetails.invalidFromEpoch) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorMessage, isFresh, isPayloadRejectionPermanent, isIntentRejectionPermanent, retryFromTimestamp, retryFromEpoch, invalidFromEpoch, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionSubmitRejectedErrorDetails {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    isFresh: ").append(toIndentedString(isFresh)).append("\n");
    sb.append("    isPayloadRejectionPermanent: ").append(toIndentedString(isPayloadRejectionPermanent)).append("\n");
    sb.append("    isIntentRejectionPermanent: ").append(toIndentedString(isIntentRejectionPermanent)).append("\n");
    sb.append("    retryFromTimestamp: ").append(toIndentedString(retryFromTimestamp)).append("\n");
    sb.append("    retryFromEpoch: ").append(toIndentedString(retryFromEpoch)).append("\n");
    sb.append("    invalidFromEpoch: ").append(toIndentedString(invalidFromEpoch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `type` to the URL query string
    if (getType() != null) {
      try {
        joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `error_message` to the URL query string
    if (getErrorMessage() != null) {
      try {
        joiner.add(String.format("%serror_message%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getErrorMessage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `is_fresh` to the URL query string
    if (isIsFresh() != null) {
      try {
        joiner.add(String.format("%sis_fresh%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(isIsFresh()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `is_payload_rejection_permanent` to the URL query string
    if (isIsPayloadRejectionPermanent() != null) {
      try {
        joiner.add(String.format("%sis_payload_rejection_permanent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(isIsPayloadRejectionPermanent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `is_intent_rejection_permanent` to the URL query string
    if (isIsIntentRejectionPermanent() != null) {
      try {
        joiner.add(String.format("%sis_intent_rejection_permanent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(isIsIntentRejectionPermanent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `retry_from_timestamp` to the URL query string
    if (getRetryFromTimestamp() != null) {
      joiner.add(getRetryFromTimestamp().toUrlQueryString(prefix + "retry_from_timestamp" + suffix));
    }

    // add `retry_from_epoch` to the URL query string
    if (getRetryFromEpoch() != null) {
      try {
        joiner.add(String.format("%sretry_from_epoch%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRetryFromEpoch()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `invalid_from_epoch` to the URL query string
    if (getInvalidFromEpoch() != null) {
      try {
        joiner.add(String.format("%sinvalid_from_epoch%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInvalidFromEpoch()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

