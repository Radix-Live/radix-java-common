/*
 * Babylon Core API - RCnet v3.1
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  This version of the Core API belongs to the fourth release candidate of the Radix Babylon network (\"RCnet v3.1\").  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` are guaranteed to be forward compatible to Babylon mainnet launch (and beyond). We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code. 
 *
 * The version of the OpenAPI document: 0.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package live.radix.core.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import live.radix.core.model.EntityReference;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * StateComponentDescendentNode
 */
@JsonPropertyOrder({
  StateComponentDescendentNode.JSON_PROPERTY_PARENT_ENTITY,
  StateComponentDescendentNode.JSON_PROPERTY_PARENT_PARTITION_NUMBER,
  StateComponentDescendentNode.JSON_PROPERTY_PARENT_SUBSTATE_KEY_HEX,
  StateComponentDescendentNode.JSON_PROPERTY_PARENT_SUBSTATE_DB_SORT_KEY_HEX,
  StateComponentDescendentNode.JSON_PROPERTY_ENTITY,
  StateComponentDescendentNode.JSON_PROPERTY_DEPTH
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-18T09:57:43.738813900+03:00[Europe/Kiev]")
public class StateComponentDescendentNode {
  public static final String JSON_PROPERTY_PARENT_ENTITY = "parent_entity";
  private EntityReference parentEntity;

  public static final String JSON_PROPERTY_PARENT_PARTITION_NUMBER = "parent_partition_number";
  private Integer parentPartitionNumber;

  public static final String JSON_PROPERTY_PARENT_SUBSTATE_KEY_HEX = "parent_substate_key_hex";
  private String parentSubstateKeyHex;

  public static final String JSON_PROPERTY_PARENT_SUBSTATE_DB_SORT_KEY_HEX = "parent_substate_db_sort_key_hex";
  private String parentSubstateDbSortKeyHex;

  public static final String JSON_PROPERTY_ENTITY = "entity";
  private EntityReference entity;

  public static final String JSON_PROPERTY_DEPTH = "depth";
  private Integer depth;

  public StateComponentDescendentNode() {
  }

  public StateComponentDescendentNode parentEntity(EntityReference parentEntity) {
    
    this.parentEntity = parentEntity;
    return this;
  }

   /**
   * Get parentEntity
   * @return parentEntity
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PARENT_ENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EntityReference getParentEntity() {
    return parentEntity;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_ENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParentEntity(EntityReference parentEntity) {
    this.parentEntity = parentEntity;
  }


  public StateComponentDescendentNode parentPartitionNumber(Integer parentPartitionNumber) {
    
    this.parentPartitionNumber = parentPartitionNumber;
    return this;
  }

   /**
   * Get parentPartitionNumber
   * minimum: 0
   * maximum: 255
   * @return parentPartitionNumber
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PARENT_PARTITION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getParentPartitionNumber() {
    return parentPartitionNumber;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_PARTITION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParentPartitionNumber(Integer parentPartitionNumber) {
    this.parentPartitionNumber = parentPartitionNumber;
  }


  public StateComponentDescendentNode parentSubstateKeyHex(String parentSubstateKeyHex) {
    
    this.parentSubstateKeyHex = parentSubstateKeyHex;
    return this;
  }

   /**
   * The hex-encoded bytes of the substate key, under the entity partition
   * @return parentSubstateKeyHex
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PARENT_SUBSTATE_KEY_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getParentSubstateKeyHex() {
    return parentSubstateKeyHex;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_SUBSTATE_KEY_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParentSubstateKeyHex(String parentSubstateKeyHex) {
    this.parentSubstateKeyHex = parentSubstateKeyHex;
  }


  public StateComponentDescendentNode parentSubstateDbSortKeyHex(String parentSubstateDbSortKeyHex) {
    
    this.parentSubstateDbSortKeyHex = parentSubstateDbSortKeyHex;
    return this;
  }

   /**
   * The hex-encoded bytes of the partially-hashed DB sort key, under the given entity partition
   * @return parentSubstateDbSortKeyHex
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PARENT_SUBSTATE_DB_SORT_KEY_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getParentSubstateDbSortKeyHex() {
    return parentSubstateDbSortKeyHex;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_SUBSTATE_DB_SORT_KEY_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParentSubstateDbSortKeyHex(String parentSubstateDbSortKeyHex) {
    this.parentSubstateDbSortKeyHex = parentSubstateDbSortKeyHex;
  }


  public StateComponentDescendentNode entity(EntityReference entity) {
    
    this.entity = entity;
    return this;
  }

   /**
   * Get entity
   * @return entity
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EntityReference getEntity() {
    return entity;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntity(EntityReference entity) {
    this.entity = entity;
  }


  public StateComponentDescendentNode depth(Integer depth) {
    
    this.depth = depth;
    return this;
  }

   /**
   * Depth under component
   * minimum: 0
   * maximum: 100
   * @return depth
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEPTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDepth() {
    return depth;
  }


  @JsonProperty(JSON_PROPERTY_DEPTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDepth(Integer depth) {
    this.depth = depth;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StateComponentDescendentNode stateComponentDescendentNode = (StateComponentDescendentNode) o;
    return Objects.equals(this.parentEntity, stateComponentDescendentNode.parentEntity) &&
        Objects.equals(this.parentPartitionNumber, stateComponentDescendentNode.parentPartitionNumber) &&
        Objects.equals(this.parentSubstateKeyHex, stateComponentDescendentNode.parentSubstateKeyHex) &&
        Objects.equals(this.parentSubstateDbSortKeyHex, stateComponentDescendentNode.parentSubstateDbSortKeyHex) &&
        Objects.equals(this.entity, stateComponentDescendentNode.entity) &&
        Objects.equals(this.depth, stateComponentDescendentNode.depth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parentEntity, parentPartitionNumber, parentSubstateKeyHex, parentSubstateDbSortKeyHex, entity, depth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StateComponentDescendentNode {\n");
    sb.append("    parentEntity: ").append(toIndentedString(parentEntity)).append("\n");
    sb.append("    parentPartitionNumber: ").append(toIndentedString(parentPartitionNumber)).append("\n");
    sb.append("    parentSubstateKeyHex: ").append(toIndentedString(parentSubstateKeyHex)).append("\n");
    sb.append("    parentSubstateDbSortKeyHex: ").append(toIndentedString(parentSubstateDbSortKeyHex)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `parent_entity` to the URL query string
    if (getParentEntity() != null) {
      joiner.add(getParentEntity().toUrlQueryString(prefix + "parent_entity" + suffix));
    }

    // add `parent_partition_number` to the URL query string
    if (getParentPartitionNumber() != null) {
      try {
        joiner.add(String.format("%sparent_partition_number%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getParentPartitionNumber()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `parent_substate_key_hex` to the URL query string
    if (getParentSubstateKeyHex() != null) {
      try {
        joiner.add(String.format("%sparent_substate_key_hex%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getParentSubstateKeyHex()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `parent_substate_db_sort_key_hex` to the URL query string
    if (getParentSubstateDbSortKeyHex() != null) {
      try {
        joiner.add(String.format("%sparent_substate_db_sort_key_hex%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getParentSubstateDbSortKeyHex()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `entity` to the URL query string
    if (getEntity() != null) {
      joiner.add(getEntity().toUrlQueryString(prefix + "entity" + suffix));
    }

    // add `depth` to the URL query string
    if (getDepth() != null) {
      try {
        joiner.add(String.format("%sdepth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDepth()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

