/*
 * Radix Core API - Babylon (Bottlenose)
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package live.radix.core.client;

import com.fasterxml.jackson.core.type.TypeReference;

import live.radix.core.ApiException;
import live.radix.core.ApiClient;
import live.radix.core.BaseApi;
import live.radix.core.Configuration;
import live.radix.core.Pair;

import live.radix.core.model.BasicErrorResponse;
import live.radix.core.model.StateAccessControllerRequest;
import live.radix.core.model.StateAccessControllerResponse;
import live.radix.core.model.StateAccountRequest;
import live.radix.core.model.StateAccountResponse;
import live.radix.core.model.StateComponentRequest;
import live.radix.core.model.StateComponentResponse;
import live.radix.core.model.StateConsensusManagerRequest;
import live.radix.core.model.StateConsensusManagerResponse;
import live.radix.core.model.StateNonFungibleRequest;
import live.radix.core.model.StateNonFungibleResponse;
import live.radix.core.model.StatePackageRequest;
import live.radix.core.model.StatePackageResponse;
import live.radix.core.model.StateResourceRequest;
import live.radix.core.model.StateResourceResponse;
import live.radix.core.model.StateValidatorRequest;
import live.radix.core.model.StateValidatorResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-14T23:48:58.387759700+03:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class StateApi extends BaseApi {

  public StateApi() {
    super(Configuration.getDefaultApiClient());
  }

  public StateApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Get Access Controller Details
   * Reads the access controller&#39;s substate/s from the top of the current ledger. 
   * @param stateAccessControllerRequest  (required)
   * @return StateAccessControllerResponse
   * @throws ApiException if fails to make API call
   */
  public StateAccessControllerResponse stateAccessControllerPost(StateAccessControllerRequest stateAccessControllerRequest) throws ApiException {
    return this.stateAccessControllerPost(stateAccessControllerRequest, Collections.emptyMap());
  }


  /**
   * Get Access Controller Details
   * Reads the access controller&#39;s substate/s from the top of the current ledger. 
   * @param stateAccessControllerRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateAccessControllerResponse
   * @throws ApiException if fails to make API call
   */
  public StateAccessControllerResponse stateAccessControllerPost(StateAccessControllerRequest stateAccessControllerRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateAccessControllerRequest;
    
    // verify the required parameter 'stateAccessControllerRequest' is set
    if (stateAccessControllerRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateAccessControllerRequest' when calling stateAccessControllerPost");
    }
    
    // create path and map variables
    String localVarPath = "/state/access-controller";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateAccessControllerResponse> localVarReturnType = new TypeReference<StateAccessControllerResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Account Details
   * Reads the account&#39;s substate/s from the top of the current ledger. Also returns all vaults under the account. 
   * @param stateAccountRequest  (required)
   * @return StateAccountResponse
   * @throws ApiException if fails to make API call
   */
  public StateAccountResponse stateAccountPost(StateAccountRequest stateAccountRequest) throws ApiException {
    return this.stateAccountPost(stateAccountRequest, Collections.emptyMap());
  }


  /**
   * Get Account Details
   * Reads the account&#39;s substate/s from the top of the current ledger. Also returns all vaults under the account. 
   * @param stateAccountRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateAccountResponse
   * @throws ApiException if fails to make API call
   */
  public StateAccountResponse stateAccountPost(StateAccountRequest stateAccountRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateAccountRequest;
    
    // verify the required parameter 'stateAccountRequest' is set
    if (stateAccountRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateAccountRequest' when calling stateAccountPost");
    }
    
    // create path and map variables
    String localVarPath = "/state/account";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateAccountResponse> localVarReturnType = new TypeReference<StateAccountResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Component Details
   * Reads the component&#39;s substate/s from the top of the current ledger. Also recursively extracts vault balance totals from the component&#39;s entity subtree. 
   * @param stateComponentRequest  (required)
   * @return StateComponentResponse
   * @throws ApiException if fails to make API call
   */
  public StateComponentResponse stateComponentPost(StateComponentRequest stateComponentRequest) throws ApiException {
    return this.stateComponentPost(stateComponentRequest, Collections.emptyMap());
  }


  /**
   * Get Component Details
   * Reads the component&#39;s substate/s from the top of the current ledger. Also recursively extracts vault balance totals from the component&#39;s entity subtree. 
   * @param stateComponentRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateComponentResponse
   * @throws ApiException if fails to make API call
   */
  public StateComponentResponse stateComponentPost(StateComponentRequest stateComponentRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateComponentRequest;
    
    // verify the required parameter 'stateComponentRequest' is set
    if (stateComponentRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateComponentRequest' when calling stateComponentPost");
    }
    
    // create path and map variables
    String localVarPath = "/state/component";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateComponentResponse> localVarReturnType = new TypeReference<StateComponentResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Consensus Manager Details
   * Reads the consensus manager&#39;s substate/s from the top of the current ledger. 
   * @param stateConsensusManagerRequest  (required)
   * @return StateConsensusManagerResponse
   * @throws ApiException if fails to make API call
   */
  public StateConsensusManagerResponse stateConsensusManagerPost(StateConsensusManagerRequest stateConsensusManagerRequest) throws ApiException {
    return this.stateConsensusManagerPost(stateConsensusManagerRequest, Collections.emptyMap());
  }


  /**
   * Get Consensus Manager Details
   * Reads the consensus manager&#39;s substate/s from the top of the current ledger. 
   * @param stateConsensusManagerRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateConsensusManagerResponse
   * @throws ApiException if fails to make API call
   */
  public StateConsensusManagerResponse stateConsensusManagerPost(StateConsensusManagerRequest stateConsensusManagerRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateConsensusManagerRequest;
    
    // verify the required parameter 'stateConsensusManagerRequest' is set
    if (stateConsensusManagerRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateConsensusManagerRequest' when calling stateConsensusManagerPost");
    }
    
    // create path and map variables
    String localVarPath = "/state/consensus-manager";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateConsensusManagerResponse> localVarReturnType = new TypeReference<StateConsensusManagerResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Non-Fungible Details
   * Reads the data associated with a single Non-Fungible Unit under a Non-Fungible Resource. 
   * @param stateNonFungibleRequest  (required)
   * @return StateNonFungibleResponse
   * @throws ApiException if fails to make API call
   */
  public StateNonFungibleResponse stateNonFungiblePost(StateNonFungibleRequest stateNonFungibleRequest) throws ApiException {
    return this.stateNonFungiblePost(stateNonFungibleRequest, Collections.emptyMap());
  }


  /**
   * Get Non-Fungible Details
   * Reads the data associated with a single Non-Fungible Unit under a Non-Fungible Resource. 
   * @param stateNonFungibleRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateNonFungibleResponse
   * @throws ApiException if fails to make API call
   */
  public StateNonFungibleResponse stateNonFungiblePost(StateNonFungibleRequest stateNonFungibleRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateNonFungibleRequest;
    
    // verify the required parameter 'stateNonFungibleRequest' is set
    if (stateNonFungibleRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateNonFungibleRequest' when calling stateNonFungiblePost");
    }
    
    // create path and map variables
    String localVarPath = "/state/non-fungible";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateNonFungibleResponse> localVarReturnType = new TypeReference<StateNonFungibleResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Package Details
   * Reads the package&#39;s substate/s from the top of the current ledger. 
   * @param statePackageRequest  (required)
   * @return StatePackageResponse
   * @throws ApiException if fails to make API call
   */
  public StatePackageResponse statePackagePost(StatePackageRequest statePackageRequest) throws ApiException {
    return this.statePackagePost(statePackageRequest, Collections.emptyMap());
  }


  /**
   * Get Package Details
   * Reads the package&#39;s substate/s from the top of the current ledger. 
   * @param statePackageRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StatePackageResponse
   * @throws ApiException if fails to make API call
   */
  public StatePackageResponse statePackagePost(StatePackageRequest statePackageRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = statePackageRequest;
    
    // verify the required parameter 'statePackageRequest' is set
    if (statePackageRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'statePackageRequest' when calling statePackagePost");
    }
    
    // create path and map variables
    String localVarPath = "/state/package";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StatePackageResponse> localVarReturnType = new TypeReference<StatePackageResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Resource Details
   * Reads the resource manager&#39;s substate/s from the top of the current ledger. 
   * @param stateResourceRequest  (required)
   * @return StateResourceResponse
   * @throws ApiException if fails to make API call
   */
  public StateResourceResponse stateResourcePost(StateResourceRequest stateResourceRequest) throws ApiException {
    return this.stateResourcePost(stateResourceRequest, Collections.emptyMap());
  }


  /**
   * Get Resource Details
   * Reads the resource manager&#39;s substate/s from the top of the current ledger. 
   * @param stateResourceRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateResourceResponse
   * @throws ApiException if fails to make API call
   */
  public StateResourceResponse stateResourcePost(StateResourceRequest stateResourceRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateResourceRequest;
    
    // verify the required parameter 'stateResourceRequest' is set
    if (stateResourceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateResourceRequest' when calling stateResourcePost");
    }
    
    // create path and map variables
    String localVarPath = "/state/resource";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateResourceResponse> localVarReturnType = new TypeReference<StateResourceResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Validator Details
   * Reads the validator&#39;s substate/s from the top of the current ledger. 
   * @param stateValidatorRequest  (required)
   * @return StateValidatorResponse
   * @throws ApiException if fails to make API call
   */
  public StateValidatorResponse stateValidatorPost(StateValidatorRequest stateValidatorRequest) throws ApiException {
    return this.stateValidatorPost(stateValidatorRequest, Collections.emptyMap());
  }


  /**
   * Get Validator Details
   * Reads the validator&#39;s substate/s from the top of the current ledger. 
   * @param stateValidatorRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return StateValidatorResponse
   * @throws ApiException if fails to make API call
   */
  public StateValidatorResponse stateValidatorPost(StateValidatorRequest stateValidatorRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = stateValidatorRequest;
    
    // verify the required parameter 'stateValidatorRequest' is set
    if (stateValidatorRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'stateValidatorRequest' when calling stateValidatorPost");
    }
    
    // create path and map variables
    String localVarPath = "/state/validator";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<StateValidatorResponse> localVarReturnType = new TypeReference<StateValidatorResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
