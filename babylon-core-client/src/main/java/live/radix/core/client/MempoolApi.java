/*
 * Babylon Core API - RCnet v3.1
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  This version of the Core API belongs to the fourth release candidate of the Radix Babylon network (\"RCnet v3.1\").  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` are guaranteed to be forward compatible to Babylon mainnet launch (and beyond). We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code. 
 *
 * The version of the OpenAPI document: 0.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package live.radix.core.client;

import com.fasterxml.jackson.core.type.TypeReference;

import live.radix.core.ApiException;
import live.radix.core.ApiClient;
import live.radix.core.Configuration;
import live.radix.core.model.*;
import live.radix.core.Pair;

import live.radix.core.model.BasicErrorResponse;
import live.radix.core.model.MempoolListRequest;
import live.radix.core.model.MempoolListResponse;
import live.radix.core.model.MempoolTransactionRequest;
import live.radix.core.model.MempoolTransactionResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-18T09:57:43.738813900+03:00[Europe/Kiev]")
public class MempoolApi {


  private ApiClient apiClient;

  public MempoolApi() {
    this(Configuration.getDefaultApiClient());
  }

  public MempoolApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get Mempool List
   * Returns the hashes of all the transactions currently in the mempool
   * @param mempoolListRequest  (required)
   * @return MempoolListResponse
   * @throws ApiException if fails to make API call
   */
  public MempoolListResponse mempoolListPost(MempoolListRequest mempoolListRequest) throws ApiException {
    return this.mempoolListPost(mempoolListRequest, Collections.emptyMap());
  }


  /**
   * Get Mempool List
   * Returns the hashes of all the transactions currently in the mempool
   * @param mempoolListRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return MempoolListResponse
   * @throws ApiException if fails to make API call
   */
  public MempoolListResponse mempoolListPost(MempoolListRequest mempoolListRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = mempoolListRequest;
    
    // verify the required parameter 'mempoolListRequest' is set
    if (mempoolListRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'mempoolListRequest' when calling mempoolListPost");
    }
    
    // create path and map variables
    String localVarPath = "/mempool/list";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<MempoolListResponse> localVarReturnType = new TypeReference<MempoolListResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Mempool Transaction
   * Returns the payload of a transaction currently in the mempool
   * @param mempoolTransactionRequest  (required)
   * @return MempoolTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MempoolTransactionResponse mempoolTransactionPost(MempoolTransactionRequest mempoolTransactionRequest) throws ApiException {
    return this.mempoolTransactionPost(mempoolTransactionRequest, Collections.emptyMap());
  }


  /**
   * Get Mempool Transaction
   * Returns the payload of a transaction currently in the mempool
   * @param mempoolTransactionRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return MempoolTransactionResponse
   * @throws ApiException if fails to make API call
   */
  public MempoolTransactionResponse mempoolTransactionPost(MempoolTransactionRequest mempoolTransactionRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = mempoolTransactionRequest;
    
    // verify the required parameter 'mempoolTransactionRequest' is set
    if (mempoolTransactionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'mempoolTransactionRequest' when calling mempoolTransactionPost");
    }
    
    // create path and map variables
    String localVarPath = "/mempool/transaction";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<MempoolTransactionResponse> localVarReturnType = new TypeReference<MempoolTransactionResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
