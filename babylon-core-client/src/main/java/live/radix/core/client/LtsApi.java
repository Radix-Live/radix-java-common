/*
 * Radix Core API - Babylon (Bottlenose)
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package live.radix.core.client;

import com.fasterxml.jackson.core.type.TypeReference;

import live.radix.core.ApiException;
import live.radix.core.ApiClient;
import live.radix.core.BaseApi;
import live.radix.core.Configuration;
import live.radix.core.Pair;

import live.radix.core.model.BasicErrorResponse;
import live.radix.core.model.LtsStateAccountAllFungibleResourceBalancesRequest;
import live.radix.core.model.LtsStateAccountAllFungibleResourceBalancesResponse;
import live.radix.core.model.LtsStateAccountDepositBehaviourRequest;
import live.radix.core.model.LtsStateAccountDepositBehaviourResponse;
import live.radix.core.model.LtsStateAccountFungibleResourceBalanceRequest;
import live.radix.core.model.LtsStateAccountFungibleResourceBalanceResponse;
import live.radix.core.model.LtsStreamAccountTransactionOutcomesRequest;
import live.radix.core.model.LtsStreamAccountTransactionOutcomesResponse;
import live.radix.core.model.LtsStreamTransactionOutcomesRequest;
import live.radix.core.model.LtsStreamTransactionOutcomesResponse;
import live.radix.core.model.LtsTransactionConstructionRequest;
import live.radix.core.model.LtsTransactionConstructionResponse;
import live.radix.core.model.LtsTransactionStatusRequest;
import live.radix.core.model.LtsTransactionStatusResponse;
import live.radix.core.model.LtsTransactionSubmitErrorResponse;
import live.radix.core.model.LtsTransactionSubmitRequest;
import live.radix.core.model.LtsTransactionSubmitResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-14T23:48:58.387759700+03:00[Europe/Kiev]", comments = "Generator version: 7.7.0")
public class LtsApi extends BaseApi {

  public LtsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public LtsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Get All Account Balances
   * Returns balances for all resources associated with an account
   * @param ltsStateAccountAllFungibleResourceBalancesRequest  (required)
   * @return LtsStateAccountAllFungibleResourceBalancesResponse
   * @throws ApiException if fails to make API call
   */
  public LtsStateAccountAllFungibleResourceBalancesResponse ltsStateAccountAllFungibleResourceBalancesPost(LtsStateAccountAllFungibleResourceBalancesRequest ltsStateAccountAllFungibleResourceBalancesRequest) throws ApiException {
    return this.ltsStateAccountAllFungibleResourceBalancesPost(ltsStateAccountAllFungibleResourceBalancesRequest, Collections.emptyMap());
  }


  /**
   * Get All Account Balances
   * Returns balances for all resources associated with an account
   * @param ltsStateAccountAllFungibleResourceBalancesRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return LtsStateAccountAllFungibleResourceBalancesResponse
   * @throws ApiException if fails to make API call
   */
  public LtsStateAccountAllFungibleResourceBalancesResponse ltsStateAccountAllFungibleResourceBalancesPost(LtsStateAccountAllFungibleResourceBalancesRequest ltsStateAccountAllFungibleResourceBalancesRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = ltsStateAccountAllFungibleResourceBalancesRequest;
    
    // verify the required parameter 'ltsStateAccountAllFungibleResourceBalancesRequest' is set
    if (ltsStateAccountAllFungibleResourceBalancesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsStateAccountAllFungibleResourceBalancesRequest' when calling ltsStateAccountAllFungibleResourceBalancesPost");
    }
    
    // create path and map variables
    String localVarPath = "/lts/state/account-all-fungible-resource-balances";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<LtsStateAccountAllFungibleResourceBalancesResponse> localVarReturnType = new TypeReference<LtsStateAccountAllFungibleResourceBalancesResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Account Deposit Behaviour
   * Returns deposit behaviour of a single account for multiple resource addresses
   * @param ltsStateAccountDepositBehaviourRequest  (required)
   * @return LtsStateAccountDepositBehaviourResponse
   * @throws ApiException if fails to make API call
   */
  public LtsStateAccountDepositBehaviourResponse ltsStateAccountDepositBehaviourPost(LtsStateAccountDepositBehaviourRequest ltsStateAccountDepositBehaviourRequest) throws ApiException {
    return this.ltsStateAccountDepositBehaviourPost(ltsStateAccountDepositBehaviourRequest, Collections.emptyMap());
  }


  /**
   * Get Account Deposit Behaviour
   * Returns deposit behaviour of a single account for multiple resource addresses
   * @param ltsStateAccountDepositBehaviourRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return LtsStateAccountDepositBehaviourResponse
   * @throws ApiException if fails to make API call
   */
  public LtsStateAccountDepositBehaviourResponse ltsStateAccountDepositBehaviourPost(LtsStateAccountDepositBehaviourRequest ltsStateAccountDepositBehaviourRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = ltsStateAccountDepositBehaviourRequest;
    
    // verify the required parameter 'ltsStateAccountDepositBehaviourRequest' is set
    if (ltsStateAccountDepositBehaviourRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsStateAccountDepositBehaviourRequest' when calling ltsStateAccountDepositBehaviourPost");
    }
    
    // create path and map variables
    String localVarPath = "/lts/state/account-deposit-behaviour";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<LtsStateAccountDepositBehaviourResponse> localVarReturnType = new TypeReference<LtsStateAccountDepositBehaviourResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Single Account Balance
   * Returns balance of a single fungible resource in an account
   * @param ltsStateAccountFungibleResourceBalanceRequest  (required)
   * @return LtsStateAccountFungibleResourceBalanceResponse
   * @throws ApiException if fails to make API call
   */
  public LtsStateAccountFungibleResourceBalanceResponse ltsStateAccountFungibleResourceBalancePost(LtsStateAccountFungibleResourceBalanceRequest ltsStateAccountFungibleResourceBalanceRequest) throws ApiException {
    return this.ltsStateAccountFungibleResourceBalancePost(ltsStateAccountFungibleResourceBalanceRequest, Collections.emptyMap());
  }


  /**
   * Get Single Account Balance
   * Returns balance of a single fungible resource in an account
   * @param ltsStateAccountFungibleResourceBalanceRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return LtsStateAccountFungibleResourceBalanceResponse
   * @throws ApiException if fails to make API call
   */
  public LtsStateAccountFungibleResourceBalanceResponse ltsStateAccountFungibleResourceBalancePost(LtsStateAccountFungibleResourceBalanceRequest ltsStateAccountFungibleResourceBalanceRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = ltsStateAccountFungibleResourceBalanceRequest;
    
    // verify the required parameter 'ltsStateAccountFungibleResourceBalanceRequest' is set
    if (ltsStateAccountFungibleResourceBalanceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsStateAccountFungibleResourceBalanceRequest' when calling ltsStateAccountFungibleResourceBalancePost");
    }
    
    // create path and map variables
    String localVarPath = "/lts/state/account-fungible-resource-balance";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<LtsStateAccountFungibleResourceBalanceResponse> localVarReturnType = new TypeReference<LtsStateAccountFungibleResourceBalanceResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Account Transaction Outcomes
   * Returns a list of committed transaction outcomes (containing balance changes) from a given state version, filtered to only transactions which involved the given account. 
   * @param ltsStreamAccountTransactionOutcomesRequest  (required)
   * @return LtsStreamAccountTransactionOutcomesResponse
   * @throws ApiException if fails to make API call
   */
  public LtsStreamAccountTransactionOutcomesResponse ltsStreamAccountTransactionOutcomesPost(LtsStreamAccountTransactionOutcomesRequest ltsStreamAccountTransactionOutcomesRequest) throws ApiException {
    return this.ltsStreamAccountTransactionOutcomesPost(ltsStreamAccountTransactionOutcomesRequest, Collections.emptyMap());
  }


  /**
   * Get Account Transaction Outcomes
   * Returns a list of committed transaction outcomes (containing balance changes) from a given state version, filtered to only transactions which involved the given account. 
   * @param ltsStreamAccountTransactionOutcomesRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return LtsStreamAccountTransactionOutcomesResponse
   * @throws ApiException if fails to make API call
   */
  public LtsStreamAccountTransactionOutcomesResponse ltsStreamAccountTransactionOutcomesPost(LtsStreamAccountTransactionOutcomesRequest ltsStreamAccountTransactionOutcomesRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = ltsStreamAccountTransactionOutcomesRequest;
    
    // verify the required parameter 'ltsStreamAccountTransactionOutcomesRequest' is set
    if (ltsStreamAccountTransactionOutcomesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsStreamAccountTransactionOutcomesRequest' when calling ltsStreamAccountTransactionOutcomesPost");
    }
    
    // create path and map variables
    String localVarPath = "/lts/stream/account-transaction-outcomes";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<LtsStreamAccountTransactionOutcomesResponse> localVarReturnType = new TypeReference<LtsStreamAccountTransactionOutcomesResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Transaction Outcomes
   * Returns a list of committed transaction outcomes (containing balance changes) from a given state version. 
   * @param ltsStreamTransactionOutcomesRequest  (required)
   * @return LtsStreamTransactionOutcomesResponse
   * @throws ApiException if fails to make API call
   */
  public LtsStreamTransactionOutcomesResponse ltsStreamTransactionOutcomesPost(LtsStreamTransactionOutcomesRequest ltsStreamTransactionOutcomesRequest) throws ApiException {
    return this.ltsStreamTransactionOutcomesPost(ltsStreamTransactionOutcomesRequest, Collections.emptyMap());
  }


  /**
   * Get Transaction Outcomes
   * Returns a list of committed transaction outcomes (containing balance changes) from a given state version. 
   * @param ltsStreamTransactionOutcomesRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return LtsStreamTransactionOutcomesResponse
   * @throws ApiException if fails to make API call
   */
  public LtsStreamTransactionOutcomesResponse ltsStreamTransactionOutcomesPost(LtsStreamTransactionOutcomesRequest ltsStreamTransactionOutcomesRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = ltsStreamTransactionOutcomesRequest;
    
    // verify the required parameter 'ltsStreamTransactionOutcomesRequest' is set
    if (ltsStreamTransactionOutcomesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsStreamTransactionOutcomesRequest' when calling ltsStreamTransactionOutcomesPost");
    }
    
    // create path and map variables
    String localVarPath = "/lts/stream/transaction-outcomes";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<LtsStreamTransactionOutcomesResponse> localVarReturnType = new TypeReference<LtsStreamTransactionOutcomesResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Construction Metadata
   * Returns information necessary to build a transaction
   * @param ltsTransactionConstructionRequest  (required)
   * @return LtsTransactionConstructionResponse
   * @throws ApiException if fails to make API call
   */
  public LtsTransactionConstructionResponse ltsTransactionConstructionPost(LtsTransactionConstructionRequest ltsTransactionConstructionRequest) throws ApiException {
    return this.ltsTransactionConstructionPost(ltsTransactionConstructionRequest, Collections.emptyMap());
  }


  /**
   * Get Construction Metadata
   * Returns information necessary to build a transaction
   * @param ltsTransactionConstructionRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return LtsTransactionConstructionResponse
   * @throws ApiException if fails to make API call
   */
  public LtsTransactionConstructionResponse ltsTransactionConstructionPost(LtsTransactionConstructionRequest ltsTransactionConstructionRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = ltsTransactionConstructionRequest;
    
    // verify the required parameter 'ltsTransactionConstructionRequest' is set
    if (ltsTransactionConstructionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsTransactionConstructionRequest' when calling ltsTransactionConstructionPost");
    }
    
    // create path and map variables
    String localVarPath = "/lts/transaction/construction";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<LtsTransactionConstructionResponse> localVarReturnType = new TypeReference<LtsTransactionConstructionResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Transaction Status
   * Shares the node&#39;s knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it&#39;s theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients. 
   * @param ltsTransactionStatusRequest  (required)
   * @return LtsTransactionStatusResponse
   * @throws ApiException if fails to make API call
   */
  public LtsTransactionStatusResponse ltsTransactionStatusPost(LtsTransactionStatusRequest ltsTransactionStatusRequest) throws ApiException {
    return this.ltsTransactionStatusPost(ltsTransactionStatusRequest, Collections.emptyMap());
  }


  /**
   * Get Transaction Status
   * Shares the node&#39;s knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it&#39;s theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients. 
   * @param ltsTransactionStatusRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return LtsTransactionStatusResponse
   * @throws ApiException if fails to make API call
   */
  public LtsTransactionStatusResponse ltsTransactionStatusPost(LtsTransactionStatusRequest ltsTransactionStatusRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = ltsTransactionStatusRequest;
    
    // verify the required parameter 'ltsTransactionStatusRequest' is set
    if (ltsTransactionStatusRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsTransactionStatusRequest' when calling ltsTransactionStatusPost");
    }
    
    // create path and map variables
    String localVarPath = "/lts/transaction/status";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<LtsTransactionStatusResponse> localVarReturnType = new TypeReference<LtsTransactionStatusResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Submit Transaction
   * Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node&#39;s mempool. 
   * @param ltsTransactionSubmitRequest  (required)
   * @return LtsTransactionSubmitResponse
   * @throws ApiException if fails to make API call
   */
  public LtsTransactionSubmitResponse ltsTransactionSubmitPost(LtsTransactionSubmitRequest ltsTransactionSubmitRequest) throws ApiException {
    return this.ltsTransactionSubmitPost(ltsTransactionSubmitRequest, Collections.emptyMap());
  }


  /**
   * Submit Transaction
   * Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node&#39;s mempool. 
   * @param ltsTransactionSubmitRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return LtsTransactionSubmitResponse
   * @throws ApiException if fails to make API call
   */
  public LtsTransactionSubmitResponse ltsTransactionSubmitPost(LtsTransactionSubmitRequest ltsTransactionSubmitRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = ltsTransactionSubmitRequest;
    
    // verify the required parameter 'ltsTransactionSubmitRequest' is set
    if (ltsTransactionSubmitRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsTransactionSubmitRequest' when calling ltsTransactionSubmitPost");
    }
    
    // create path and map variables
    String localVarPath = "/lts/transaction/submit";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<LtsTransactionSubmitResponse> localVarReturnType = new TypeReference<LtsTransactionSubmitResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
